
wiegand_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003180  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003238  08003238  00013238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800336c  0800336c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800336c  0800336c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800336c  0800336c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800336c  0800336c  0001336c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003370  08003370  00013370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000074  080033e8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080033e8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc56  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4a  00000000  00000000  0002ccf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0002ea40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  0002f258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014993  00000000  00000000  0002f9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b26f  00000000  00000000  0004434b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f250  00000000  00000000  0004f5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce80a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef8  00000000  00000000  000ce860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003220 	.word	0x08003220

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	08003220 	.word	0x08003220

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b5b0      	push	{r4, r5, r7, lr}
 8000412:	b09e      	sub	sp, #120	; 0x78
 8000414:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  wg0.cardTempHigh = 0;
 8000416:	4b5c      	ldr	r3, [pc, #368]	; (8000588 <main+0x178>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
  wg0.cardTemp = 0;
 800041c:	4b5a      	ldr	r3, [pc, #360]	; (8000588 <main+0x178>)
 800041e:	2200      	movs	r2, #0
 8000420:	605a      	str	r2, [r3, #4]
  wg0.lastWiegand = 0;
 8000422:	4b59      	ldr	r3, [pc, #356]	; (8000588 <main+0x178>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  wg0.code = 0;
 8000428:	4b57      	ldr	r3, [pc, #348]	; (8000588 <main+0x178>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  wg0.bitCount = 0;
 800042e:	4b56      	ldr	r3, [pc, #344]	; (8000588 <main+0x178>)
 8000430:	2200      	movs	r2, #0
 8000432:	821a      	strh	r2, [r3, #16]
  wg0.wiegandType = 0;
 8000434:	4b54      	ldr	r3, [pc, #336]	; (8000588 <main+0x178>)
 8000436:	2200      	movs	r2, #0
 8000438:	825a      	strh	r2, [r3, #18]

  wg1.cardTempHigh = 0;
 800043a:	4b54      	ldr	r3, [pc, #336]	; (800058c <main+0x17c>)
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
  wg1.cardTemp = 0;
 8000440:	4b52      	ldr	r3, [pc, #328]	; (800058c <main+0x17c>)
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  wg1.lastWiegand = 0;
 8000446:	4b51      	ldr	r3, [pc, #324]	; (800058c <main+0x17c>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  wg1.code = 0;
 800044c:	4b4f      	ldr	r3, [pc, #316]	; (800058c <main+0x17c>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  wg1.bitCount = 0;
 8000452:	4b4e      	ldr	r3, [pc, #312]	; (800058c <main+0x17c>)
 8000454:	2200      	movs	r2, #0
 8000456:	821a      	strh	r2, [r3, #16]
  wg1.wiegandType = 0;
 8000458:	4b4c      	ldr	r3, [pc, #304]	; (800058c <main+0x17c>)
 800045a:	2200      	movs	r2, #0
 800045c:	825a      	strh	r2, [r3, #18]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045e:	f000 fbcb 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000462:	f000 f89f 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000466:	f000 f933 	bl	80006d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800046a:	f000 f8e3 	bl	8000634 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t InitMessage[] = "Iniciando Leitor Wiegand v1.3\r\n"; //Data to send
 800046e:	2140      	movs	r1, #64	; 0x40
 8000470:	187b      	adds	r3, r7, r1
 8000472:	4a47      	ldr	r2, [pc, #284]	; (8000590 <main+0x180>)
 8000474:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000476:	c331      	stmia	r3!, {r0, r4, r5}
 8000478:	ca31      	ldmia	r2!, {r0, r4, r5}
 800047a:	c331      	stmia	r3!, {r0, r4, r5}
 800047c:	ca11      	ldmia	r2!, {r0, r4}
 800047e:	c311      	stmia	r3!, {r0, r4}
  HAL_UART_Transmit(&huart1, InitMessage, sizeof(InitMessage), 10);// Sending in normal mode
 8000480:	1879      	adds	r1, r7, r1
 8000482:	4844      	ldr	r0, [pc, #272]	; (8000594 <main+0x184>)
 8000484:	230a      	movs	r3, #10
 8000486:	2220      	movs	r2, #32
 8000488:	f001 fd68 	bl	8001f5c <HAL_UART_Transmit>
  HAL_Delay(1000);
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	0018      	movs	r0, r3
 8000492:	f000 fc37 	bl	8000d04 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (wig_available(&wg0)) 
 8000496:	4b3c      	ldr	r3, [pc, #240]	; (8000588 <main+0x178>)
 8000498:	0018      	movs	r0, r3
 800049a:	f000 faac 	bl	80009f6 <wig_available>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d035      	beq.n	800050e <main+0xfe>
    {
      wig_flag_inrt = 0;
 80004a2:	4b3d      	ldr	r3, [pc, #244]	; (8000598 <main+0x188>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
      uint32_t wcode = getCode(&wg0);
 80004a8:	4b37      	ldr	r3, [pc, #220]	; (8000588 <main+0x178>)
 80004aa:	0018      	movs	r0, r3
 80004ac:	f000 fa47 	bl	800093e <getCode>
 80004b0:	0003      	movs	r3, r0
 80004b2:	66fb      	str	r3, [r7, #108]	; 0x6c
      int16_t wtype = getWiegandType(&wg0);
 80004b4:	256a      	movs	r5, #106	; 0x6a
 80004b6:	197c      	adds	r4, r7, r5
 80004b8:	4b33      	ldr	r3, [pc, #204]	; (8000588 <main+0x178>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fa49 	bl	8000952 <getWiegandType>
 80004c0:	0003      	movs	r3, r0
 80004c2:	8023      	strh	r3, [r4, #0]
      wig_flag_inrt = 1;
 80004c4:	4b34      	ldr	r3, [pc, #208]	; (8000598 <main+0x188>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
      char str[64] = {0,};
 80004ca:	003b      	movs	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	3304      	adds	r3, #4
 80004d2:	223c      	movs	r2, #60	; 0x3c
 80004d4:	2100      	movs	r1, #0
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 fa60 	bl	800299c <memset>
      snprintf(str, 64, "WG0: HEX=0x%lX - DEC=%lu, Protocol %d \n\r", wcode, wcode, wtype);
 80004dc:	197b      	adds	r3, r7, r5
 80004de:	2200      	movs	r2, #0
 80004e0:	5e9b      	ldrsh	r3, [r3, r2]
 80004e2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80004e4:	4a2d      	ldr	r2, [pc, #180]	; (800059c <main+0x18c>)
 80004e6:	0038      	movs	r0, r7
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	000b      	movs	r3, r1
 80004f0:	2140      	movs	r1, #64	; 0x40
 80004f2:	f002 fa5b 	bl	80029ac <sniprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	f7ff fe01 	bl	8000100 <strlen>
 80004fe:	0003      	movs	r3, r0
 8000500:	b29a      	uxth	r2, r3
 8000502:	23fa      	movs	r3, #250	; 0xfa
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	0039      	movs	r1, r7
 8000508:	4822      	ldr	r0, [pc, #136]	; (8000594 <main+0x184>)
 800050a:	f001 fd27 	bl	8001f5c <HAL_UART_Transmit>
    }
    if (wig_available(&wg1))
 800050e:	4b1f      	ldr	r3, [pc, #124]	; (800058c <main+0x17c>)
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fa70 	bl	80009f6 <wig_available>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d0bd      	beq.n	8000496 <main+0x86>
    {
      wig_flag_inrt = 0;
 800051a:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <main+0x188>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
      uint32_t wcode = getCode(&wg1);
 8000520:	4b1a      	ldr	r3, [pc, #104]	; (800058c <main+0x17c>)
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fa0b 	bl	800093e <getCode>
 8000528:	0003      	movs	r3, r0
 800052a:	667b      	str	r3, [r7, #100]	; 0x64
      int16_t wtype = getWiegandType(&wg1);
 800052c:	2562      	movs	r5, #98	; 0x62
 800052e:	197c      	adds	r4, r7, r5
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <main+0x17c>)
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fa0d 	bl	8000952 <getWiegandType>
 8000538:	0003      	movs	r3, r0
 800053a:	8023      	strh	r3, [r4, #0]
      wig_flag_inrt = 1;
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <main+0x188>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
      char str[64] = {0,};
 8000542:	003b      	movs	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	3304      	adds	r3, #4
 800054a:	223c      	movs	r2, #60	; 0x3c
 800054c:	2100      	movs	r1, #0
 800054e:	0018      	movs	r0, r3
 8000550:	f002 fa24 	bl	800299c <memset>
      snprintf(str, 64, "WG1: HEX=0x%lX - DEC=%lu, Protocol %d \n\r", wcode, wcode, wtype);
 8000554:	197b      	adds	r3, r7, r5
 8000556:	2200      	movs	r2, #0
 8000558:	5e9b      	ldrsh	r3, [r3, r2]
 800055a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800055c:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <main+0x190>)
 800055e:	0038      	movs	r0, r7
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	000b      	movs	r3, r1
 8000568:	2140      	movs	r1, #64	; 0x40
 800056a:	f002 fa1f 	bl	80029ac <sniprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800056e:	003b      	movs	r3, r7
 8000570:	0018      	movs	r0, r3
 8000572:	f7ff fdc5 	bl	8000100 <strlen>
 8000576:	0003      	movs	r3, r0
 8000578:	b29a      	uxth	r2, r3
 800057a:	23fa      	movs	r3, #250	; 0xfa
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	0039      	movs	r1, r7
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <main+0x184>)
 8000582:	f001 fceb 	bl	8001f5c <HAL_UART_Transmit>
	  if (wig_available(&wg0)) 
 8000586:	e786      	b.n	8000496 <main+0x86>
 8000588:	20000140 	.word	0x20000140
 800058c:	2000012c 	.word	0x2000012c
 8000590:	08003290 	.word	0x08003290
 8000594:	2000009c 	.word	0x2000009c
 8000598:	20000000 	.word	0x20000000
 800059c:	08003238 	.word	0x08003238
 80005a0:	08003264 	.word	0x08003264

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b093      	sub	sp, #76	; 0x4c
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	2414      	movs	r4, #20
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	0018      	movs	r0, r3
 80005b0:	2334      	movs	r3, #52	; 0x34
 80005b2:	001a      	movs	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	f002 f9f1 	bl	800299c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	0018      	movs	r0, r3
 80005be:	2310      	movs	r3, #16
 80005c0:	001a      	movs	r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	f002 f9ea 	bl	800299c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 fe3d 	bl	800124c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2202      	movs	r2, #2
 80005d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	0052      	lsls	r2, r2, #1
 80005de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2240      	movs	r2, #64	; 0x40
 80005ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 fe75 	bl	80012e4 <HAL_RCC_OscConfig>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005fe:	f000 f8ab 	bl	8000758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2207      	movs	r2, #7
 8000606:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2100      	movs	r1, #0
 800061e:	0018      	movs	r0, r3
 8000620:	f001 f976 	bl	8001910 <HAL_RCC_ClockConfig>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000628:	f000 f896 	bl	8000758 <Error_Handler>
  }
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b013      	add	sp, #76	; 0x4c
 8000632:	bd90      	pop	{r4, r7, pc}

08000634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 800063a:	4a24      	ldr	r2, [pc, #144]	; (80006cc <MX_USART1_UART_Init+0x98>)
 800063c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 8000640:	22e1      	movs	r2, #225	; 0xe1
 8000642:	0252      	lsls	r2, r2, #9
 8000644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fc16 	bl	8001eb0 <HAL_UART_Init>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000688:	f000 f866 	bl	8000758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 800068e:	2100      	movs	r1, #0
 8000690:	0018      	movs	r0, r3
 8000692:	f002 f879 	bl	8002788 <HAL_UARTEx_SetTxFifoThreshold>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800069a:	f000 f85d 	bl	8000758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 f8b0 	bl	8002808 <HAL_UARTEx_SetRxFifoThreshold>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006ac:	f000 f854 	bl	8000758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <MX_USART1_UART_Init+0x94>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f002 f82e 	bl	8002714 <HAL_UARTEx_DisableFifoMode>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006bc:	f000 f84c 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	40013800 	.word	0x40013800

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	240c      	movs	r4, #12
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	0018      	movs	r0, r3
 80006dc:	2314      	movs	r3, #20
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f002 f95b 	bl	800299c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_GPIO_Init+0x80>)
 80006e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_GPIO_Init+0x80>)
 80006ec:	2102      	movs	r1, #2
 80006ee:	430a      	orrs	r2, r1
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_GPIO_Init+0x80>)
 80006f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f6:	2202      	movs	r2, #2
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_GPIO_Init+0x80>)
 8000700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_GPIO_Init+0x80>)
 8000704:	2101      	movs	r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	635a      	str	r2, [r3, #52]	; 0x34
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_GPIO_Init+0x80>)
 800070c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070e:	2201      	movs	r2, #1
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA4 PA5 PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <MX_GPIO_Init+0x84>)
 800071a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2284      	movs	r2, #132	; 0x84
 8000720:	0392      	lsls	r2, r2, #14
 8000722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	193a      	adds	r2, r7, r4
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	0011      	movs	r1, r2
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fbe8 	bl	8000f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	2007      	movs	r0, #7
 800073e:	f000 fbb1 	bl	8000ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000742:	2007      	movs	r0, #7
 8000744:	f000 fbc3 	bl	8000ece <HAL_NVIC_EnableIRQ>

}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b009      	add	sp, #36	; 0x24
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	00003030 	.word	0x00003030

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x44>)
 800076c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_MspInit+0x44>)
 8000770:	2101      	movs	r1, #1
 8000772:	430a      	orrs	r2, r1
 8000774:	641a      	str	r2, [r3, #64]	; 0x40
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_MspInit+0x44>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	2201      	movs	r2, #1
 800077c:	4013      	ands	r3, r2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_MspInit+0x44>)
 8000784:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_MspInit+0x44>)
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	0549      	lsls	r1, r1, #21
 800078c:	430a      	orrs	r2, r1
 800078e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_MspInit+0x44>)
 8000792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	055b      	lsls	r3, r3, #21
 8000798:	4013      	ands	r3, r2
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b002      	add	sp, #8
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b091      	sub	sp, #68	; 0x44
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	232c      	movs	r3, #44	; 0x2c
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	0018      	movs	r0, r3
 80007ba:	2314      	movs	r3, #20
 80007bc:	001a      	movs	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f002 f8ec 	bl	800299c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	2414      	movs	r4, #20
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	0018      	movs	r0, r3
 80007ca:	2318      	movs	r3, #24
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f002 f8e4 	bl	800299c <memset>
  if(huart->Instance==USART1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <HAL_UART_MspInit+0xb8>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d13d      	bne.n	800085a <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fa39 	bl	8001c64 <HAL_RCCEx_PeriphCLKConfig>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80007f6:	f7ff ffaf 	bl	8000758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <HAL_UART_MspInit+0xbc>)
 80007fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <HAL_UART_MspInit+0xbc>)
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	01c9      	lsls	r1, r1, #7
 8000804:	430a      	orrs	r2, r1
 8000806:	641a      	str	r2, [r3, #64]	; 0x40
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <HAL_UART_MspInit+0xbc>)
 800080a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	01db      	lsls	r3, r3, #7
 8000810:	4013      	ands	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_UART_MspInit+0xbc>)
 8000818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <HAL_UART_MspInit+0xbc>)
 800081c:	2102      	movs	r1, #2
 800081e:	430a      	orrs	r2, r1
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_UART_MspInit+0xbc>)
 8000824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000826:	2202      	movs	r2, #2
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800082e:	212c      	movs	r1, #44	; 0x2c
 8000830:	187b      	adds	r3, r7, r1
 8000832:	22c0      	movs	r2, #192	; 0xc0
 8000834:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2202      	movs	r2, #2
 800083a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	187b      	adds	r3, r7, r1
 8000850:	4a06      	ldr	r2, [pc, #24]	; (800086c <HAL_UART_MspInit+0xc0>)
 8000852:	0019      	movs	r1, r3
 8000854:	0010      	movs	r0, r2
 8000856:	f000 fb57 	bl	8000f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b011      	add	sp, #68	; 0x44
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	40013800 	.word	0x40013800
 8000868:	40021000 	.word	0x40021000
 800086c:	50000400 	.word	0x50000400

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 fa1a 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80008a2:	2010      	movs	r0, #16
 80008a4:	f000 fc94 	bl	80011d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80008a8:	2020      	movs	r0, #32
 80008aa:	f000 fc91 	bl	80011d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	015b      	lsls	r3, r3, #5
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fc8c 	bl	80011d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	019b      	lsls	r3, r3, #6
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fc87 	bl	80011d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	18d3      	adds	r3, r2, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f002 f826 	bl	8002948 <__errno>
 80008fc:	0003      	movs	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	2301      	movs	r3, #1
 8000904:	425b      	negs	r3, r3
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	18d2      	adds	r2, r2, r3
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <_sbrk+0x64>)
 8000918:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b006      	add	sp, #24
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20002000 	.word	0x20002000
 8000928:	00000400 	.word	0x00000400
 800092c:	20000090 	.word	0x20000090
 8000930:	20000168 	.word	0x20000168

08000934 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <getCode>:
#include "wiegand.h"

uint32_t getCode(Wiegand *w)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
	return w->code;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68db      	ldr	r3, [r3, #12]
}
 800094a:	0018      	movs	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}

08000952 <getWiegandType>:

int16_t getWiegandType(Wiegand *w)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
	return w->wiegandType;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2212      	movs	r2, #18
 800095e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}

08000968 <GetCardId>:

	w->lastWiegand = HAL_GetTick();	// Keep track of last wiegand bit received
}

uint32_t GetCardId(volatile uint32_t *codehigh, volatile uint32_t *codelow, uint8_t bitlength)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	701a      	strb	r2, [r3, #0]

	if(bitlength == 26)								// EM tag
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b1a      	cmp	r3, #26
 800097c:	d105      	bne.n	800098a <GetCardId+0x22>
	{
		return (*codelow & 0x1FFFFFE) >> 1;
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	085b      	lsrs	r3, r3, #1
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	0a1b      	lsrs	r3, r3, #8
 8000988:	e01b      	b.n	80009c2 <GetCardId+0x5a>
	}

	if(bitlength == 34)								// Mifare
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b22      	cmp	r3, #34	; 0x22
 8000990:	d115      	bne.n	80009be <GetCardId+0x56>
	{
		*codehigh = *codehigh & 0x03;				// only need the 2 LSB of the codehigh
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2203      	movs	r2, #3
 8000998:	401a      	ands	r2, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	601a      	str	r2, [r3, #0]
		*codehigh <<= 30;							// shift 2 LSB to MSB
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	079a      	lsls	r2, r3, #30
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	601a      	str	r2, [r3, #0]
		*codelow >>= 1;
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	085a      	lsrs	r2, r3, #1
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	601a      	str	r2, [r3, #0]
		return *codehigh | *codelow;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	e001      	b.n	80009c2 <GetCardId+0x5a>
	}

	return *codelow;								// EM tag or Mifare without parity bits
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	681b      	ldr	r3, [r3, #0]
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b004      	add	sp, #16
 80009c8:	bd80      	pop	{r7, pc}

080009ca <translateEnterEscapeKeyPress>:

uint8_t translateEnterEscapeKeyPress(uint8_t originalKeyPress)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	0002      	movs	r2, r0
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	701a      	strb	r2, [r3, #0]
	switch(originalKeyPress)
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b0a      	cmp	r3, #10
 80009dc:	d003      	beq.n	80009e6 <translateEnterEscapeKeyPress+0x1c>
 80009de:	2b0b      	cmp	r3, #11
 80009e0:	d103      	bne.n	80009ea <translateEnterEscapeKeyPress+0x20>
	{
		case 0x0b:        // 11 or * key
			return 0x0d;  // 13 or ASCII ENTER
 80009e2:	230d      	movs	r3, #13
 80009e4:	e003      	b.n	80009ee <translateEnterEscapeKeyPress+0x24>

		case 0x0a:        // 10 or # key
			return 0x1b;  // 27 or ASCII ESCAPE
 80009e6:	231b      	movs	r3, #27
 80009e8:	e001      	b.n	80009ee <translateEnterEscapeKeyPress+0x24>

		default:
			return originalKeyPress;
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
	}
}
 80009ee:	0018      	movs	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <wig_available>:

uint8_t wig_available(Wiegand *w)
{
 80009f6:	b590      	push	{r4, r7, lr}
 80009f8:	b087      	sub	sp, #28
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
	uint32_t cardID;
	uint32_t time_wig = HAL_GetTick();
 80009fe:	f000 f977 	bl	8000cf0 <HAL_GetTick>
 8000a02:	0003      	movs	r3, r0
 8000a04:	617b      	str	r3, [r7, #20]

	if((time_wig - w->lastWiegand) > 25) // if no more signal coming through after 25ms
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	2b19      	cmp	r3, #25
 8000a10:	d800      	bhi.n	8000a14 <wig_available+0x1e>
 8000a12:	e0c2      	b.n	8000b9a <wig_available+0x1a4>
	{
		if((w->bitCount == 24) || (w->bitCount == 26) || (w->bitCount == 32) || (w->bitCount == 34) || (w->bitCount == 8) || (w->bitCount == 4)) // bitCount for keypress=4 or 8, Wiegand 26=24 or 26, Wiegand 34=32 or 34
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	8a1b      	ldrh	r3, [r3, #16]
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	2b18      	cmp	r3, #24
 8000a1c:	d019      	beq.n	8000a52 <wig_available+0x5c>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	8a1b      	ldrh	r3, [r3, #16]
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	2b1a      	cmp	r3, #26
 8000a26:	d014      	beq.n	8000a52 <wig_available+0x5c>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	8a1b      	ldrh	r3, [r3, #16]
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	2b20      	cmp	r3, #32
 8000a30:	d00f      	beq.n	8000a52 <wig_available+0x5c>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	8a1b      	ldrh	r3, [r3, #16]
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	2b22      	cmp	r3, #34	; 0x22
 8000a3a:	d00a      	beq.n	8000a52 <wig_available+0x5c>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	8a1b      	ldrh	r3, [r3, #16]
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	2b08      	cmp	r3, #8
 8000a44:	d005      	beq.n	8000a52 <wig_available+0x5c>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	8a1b      	ldrh	r3, [r3, #16]
 8000a4a:	b21b      	sxth	r3, r3
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	d000      	beq.n	8000a52 <wig_available+0x5c>
 8000a50:	e095      	b.n	8000b7e <wig_available+0x188>
		{
			w->cardTemp >>= 1; // shift right 1 bit to get back the real value - interrupt done 1 left shift in advance
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	085a      	lsrs	r2, r3, #1
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	605a      	str	r2, [r3, #4]

			if(w->bitCount > 32) // bit count more than 32 bits, shift high bits right to make adjustment
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	8a1b      	ldrh	r3, [r3, #16]
 8000a60:	b21b      	sxth	r3, r3
 8000a62:	2b20      	cmp	r3, #32
 8000a64:	dd04      	ble.n	8000a70 <wig_available+0x7a>
			{
				w->cardTempHigh >>= 1;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	085a      	lsrs	r2, r3, #1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	601a      	str	r2, [r3, #0]
			}

			if(w->bitCount == 8)		// keypress wiegand with integrity
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	8a1b      	ldrh	r3, [r3, #16]
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	2b08      	cmp	r3, #8
 8000a78:	d140      	bne.n	8000afc <wig_available+0x106>
			{
				// 8-bit Wiegand keyboard data, high nibble is the "NOT" of low nibble
				// eg if key 1 pressed, data=E1 in binary 11100001 , high nibble=1110 , low nibble = 0001
				uint8_t highNibble = (w->cardTemp & 0xf0) >> 4;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	240f      	movs	r4, #15
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	210f      	movs	r1, #15
 8000a88:	400a      	ands	r2, r1
 8000a8a:	701a      	strb	r2, [r3, #0]
				uint8_t lowNibble = (w->cardTemp & 0x0f);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	200e      	movs	r0, #14
 8000a94:	183b      	adds	r3, r7, r0
 8000a96:	210f      	movs	r1, #15
 8000a98:	400a      	ands	r2, r1
 8000a9a:	701a      	strb	r2, [r3, #0]
				w->wiegandType = w->bitCount;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	8a1b      	ldrh	r3, [r3, #16]
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	825a      	strh	r2, [r3, #18]
				w->bitCount = 0;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	821a      	strh	r2, [r3, #16]
				w->cardTemp = 0;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
				w->cardTempHigh = 0;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]

				if(lowNibble == (~highNibble & 0x0f))		// check if low nibble matches the "NOT" of high nibble.
 8000ab8:	183b      	adds	r3, r7, r0
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	400b      	ands	r3, r1
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d10a      	bne.n	8000ae0 <wig_available+0xea>
				{
					w->code = (int16_t)translateEnterEscapeKeyPress(lowNibble);
 8000aca:	183b      	adds	r3, r7, r0
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff ff7b 	bl	80009ca <translateEnterEscapeKeyPress>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	60da      	str	r2, [r3, #12]
					return 1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e05d      	b.n	8000b9c <wig_available+0x1a6>
				}
				else
				{
					w->lastWiegand = time_wig;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	609a      	str	r2, [r3, #8]
					w->bitCount = 0;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	821a      	strh	r2, [r3, #16]
					w->cardTemp = 0;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
					w->cardTempHigh = 0;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
					return 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	e04f      	b.n	8000b9c <wig_available+0x1a6>
				}

				// TODO: Handle validation failure case!
			}
			else if(4 == w->bitCount)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	8a1b      	ldrh	r3, [r3, #16]
 8000b00:	b21b      	sxth	r3, r3
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	d11c      	bne.n	8000b40 <wig_available+0x14a>
			{
				// 4-bit Wiegand codes have no data integrity check so we just
				// read the LOW nibble.
				w->code = (int16_t)translateEnterEscapeKeyPress(w->cardTemp & 0x0000000F);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	220f      	movs	r2, #15
 8000b0e:	4013      	ands	r3, r2
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff ff59 	bl	80009ca <translateEnterEscapeKeyPress>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	60da      	str	r2, [r3, #12]

				w->wiegandType = w->bitCount;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	8a1b      	ldrh	r3, [r3, #16]
 8000b24:	b21a      	sxth	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	825a      	strh	r2, [r3, #18]
				w->bitCount = 0;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	821a      	strh	r2, [r3, #16]
				w->cardTemp = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
				w->cardTempHigh = 0;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]

				return 1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e02d      	b.n	8000b9c <wig_available+0x1a6>
			}
			else		// wiegand 26 or wiegand 34
			{
				cardID = GetCardId(&w->cardTempHigh, &w->cardTemp, w->bitCount);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	1d19      	adds	r1, r3, #4
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	8a1b      	ldrh	r3, [r3, #16]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	001a      	movs	r2, r3
 8000b50:	f7ff ff0a 	bl	8000968 <GetCardId>
 8000b54:	0003      	movs	r3, r0
 8000b56:	613b      	str	r3, [r7, #16]
				w->wiegandType = w->bitCount;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	8a1b      	ldrh	r3, [r3, #16]
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	825a      	strh	r2, [r3, #18]
				w->bitCount = 0;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	821a      	strh	r2, [r3, #16]
				w->cardTemp = 0;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
				w->cardTempHigh = 0;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
				w->code = cardID;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	60da      	str	r2, [r3, #12]
				return 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <wig_available+0x1a6>
			}
		}
		else
		{
			// well time over 25 ms and bitCount !=8 , !=26, !=34 , must be noise or nothing then.
			w->lastWiegand = time_wig;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	609a      	str	r2, [r3, #8]
			w->bitCount = 0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	821a      	strh	r2, [r3, #16]
			w->cardTemp = 0;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
			w->cardTempHigh = 0;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
			return 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <wig_available+0x1a6>
		}
	}
	else
	{
		return 0;
 8000b9a:	2300      	movs	r3, #0
	}
}
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b007      	add	sp, #28
 8000ba2:	bd90      	pop	{r4, r7, pc}

08000ba4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ba6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba8:	f7ff fec4 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bae:	490d      	ldr	r1, [pc, #52]	; (8000be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <LoopForever+0xe>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	; (8000bf0 <LoopForever+0x16>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bd2:	f001 febf 	bl	8002954 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bd6:	f7ff fc1b 	bl	8000410 <main>

08000bda <LoopForever>:

LoopForever:
  b LoopForever
 8000bda:	e7fe      	b.n	8000bda <LoopForever>
  ldr   r0, =_estack
 8000bdc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000be8:	08003374 	.word	0x08003374
  ldr r2, =_sbss
 8000bec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bf0:	20000168 	.word	0x20000168

08000bf4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_Init+0x3c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_Init+0x3c>)
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	0049      	lsls	r1, r1, #1
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c12:	2003      	movs	r0, #3
 8000c14:	f000 f810 	bl	8000c38 <HAL_InitTick>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d003      	beq.n	8000c24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e001      	b.n	8000c28 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fd9e 	bl	8000764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
}
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b002      	add	sp, #8
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40022000 	.word	0x40022000

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <HAL_InitTick+0x88>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d02b      	beq.n	8000ca8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <HAL_InitTick+0x8c>)
 8000c52:	681c      	ldr	r4, [r3, #0]
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HAL_InitTick+0x88>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	0019      	movs	r1, r3
 8000c5a:	23fa      	movs	r3, #250	; 0xfa
 8000c5c:	0098      	lsls	r0, r3, #2
 8000c5e:	f7ff fa61 	bl	8000124 <__udivsi3>
 8000c62:	0003      	movs	r3, r0
 8000c64:	0019      	movs	r1, r3
 8000c66:	0020      	movs	r0, r4
 8000c68:	f7ff fa5c 	bl	8000124 <__udivsi3>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 f93d 	bl	8000eee <HAL_SYSTICK_Config>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d112      	bne.n	8000c9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d80a      	bhi.n	8000c94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	2301      	movs	r3, #1
 8000c82:	425b      	negs	r3, r3
 8000c84:	2200      	movs	r2, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 f90c 	bl	8000ea4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_InitTick+0x90>)
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	e00d      	b.n	8000cb0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c94:	230f      	movs	r3, #15
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e008      	b.n	8000cb0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c9e:	230f      	movs	r3, #15
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e003      	b.n	8000cb0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	781b      	ldrb	r3, [r3, #0]
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b005      	add	sp, #20
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	2000000c 	.word	0x2000000c
 8000cc4:	20000004 	.word	0x20000004
 8000cc8:	20000008 	.word	0x20000008

08000ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x1c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x20>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	18d2      	adds	r2, r2, r3
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_IncTick+0x20>)
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	2000000c 	.word	0x2000000c
 8000cec:	20000154 	.word	0x20000154

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <HAL_GetTick+0x10>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	20000154 	.word	0x20000154

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff fff0 	bl	8000cf0 <HAL_GetTick>
 8000d10:	0003      	movs	r3, r0
 8000d12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	001a      	movs	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	189b      	adds	r3, r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	f7ff ffe0 	bl	8000cf0 <HAL_GetTick>
 8000d30:	0002      	movs	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b004      	add	sp, #16
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	2000000c 	.word	0x2000000c

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	0002      	movs	r2, r0
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d5e:	d809      	bhi.n	8000d74 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	001a      	movs	r2, r3
 8000d66:	231f      	movs	r3, #31
 8000d68:	401a      	ands	r2, r3
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_EnableIRQ+0x30>)
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	4091      	lsls	r1, r2
 8000d70:	000a      	movs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	0002      	movs	r2, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b7f      	cmp	r3, #127	; 0x7f
 8000d94:	d828      	bhi.n	8000de8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d96:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <__NVIC_SetPriority+0xd4>)
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	33c0      	adds	r3, #192	; 0xc0
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	589b      	ldr	r3, [r3, r2]
 8000da6:	1dfa      	adds	r2, r7, #7
 8000da8:	7812      	ldrb	r2, [r2, #0]
 8000daa:	0011      	movs	r1, r2
 8000dac:	2203      	movs	r2, #3
 8000dae:	400a      	ands	r2, r1
 8000db0:	00d2      	lsls	r2, r2, #3
 8000db2:	21ff      	movs	r1, #255	; 0xff
 8000db4:	4091      	lsls	r1, r2
 8000db6:	000a      	movs	r2, r1
 8000db8:	43d2      	mvns	r2, r2
 8000dba:	401a      	ands	r2, r3
 8000dbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	019b      	lsls	r3, r3, #6
 8000dc2:	22ff      	movs	r2, #255	; 0xff
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	2303      	movs	r3, #3
 8000dce:	4003      	ands	r3, r0
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd4:	481f      	ldr	r0, [pc, #124]	; (8000e54 <__NVIC_SetPriority+0xd4>)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	430a      	orrs	r2, r1
 8000de0:	33c0      	adds	r3, #192	; 0xc0
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000de6:	e031      	b.n	8000e4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <__NVIC_SetPriority+0xd8>)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	0019      	movs	r1, r3
 8000df0:	230f      	movs	r3, #15
 8000df2:	400b      	ands	r3, r1
 8000df4:	3b08      	subs	r3, #8
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3306      	adds	r3, #6
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	3304      	adds	r3, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1dfa      	adds	r2, r7, #7
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	0011      	movs	r1, r2
 8000e08:	2203      	movs	r2, #3
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	21ff      	movs	r1, #255	; 0xff
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	22ff      	movs	r2, #255	; 0xff
 8000e20:	401a      	ands	r2, r3
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	0018      	movs	r0, r3
 8000e28:	2303      	movs	r3, #3
 8000e2a:	4003      	ands	r3, r0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <__NVIC_SetPriority+0xd8>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	001c      	movs	r4, r3
 8000e38:	230f      	movs	r3, #15
 8000e3a:	4023      	ands	r3, r4
 8000e3c:	3b08      	subs	r3, #8
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	430a      	orrs	r2, r1
 8000e42:	3306      	adds	r3, #6
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	18c3      	adds	r3, r0, r3
 8000e48:	3304      	adds	r3, #4
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b003      	add	sp, #12
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	1e5a      	subs	r2, r3, #1
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	045b      	lsls	r3, r3, #17
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d301      	bcc.n	8000e74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e70:	2301      	movs	r3, #1
 8000e72:	e010      	b.n	8000e96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <SysTick_Config+0x44>)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	425b      	negs	r3, r3
 8000e80:	2103      	movs	r1, #3
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff ff7c 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x44>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x44>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	0018      	movs	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	210f      	movs	r1, #15
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	1c02      	adds	r2, r0, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff ff5d 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b004      	add	sp, #16
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff ff33 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff ffaf 	bl	8000e5c <SysTick_Config>
 8000efe:	0003      	movs	r3, r0
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f16:	e147      	b.n	80011a8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	4091      	lsls	r1, r2
 8000f22:	000a      	movs	r2, r1
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d100      	bne.n	8000f30 <HAL_GPIO_Init+0x28>
 8000f2e:	e138      	b.n	80011a2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2203      	movs	r2, #3
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d005      	beq.n	8000f48 <HAL_GPIO_Init+0x40>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2203      	movs	r2, #3
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d130      	bne.n	8000faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	409a      	lsls	r2, r3
 8000f56:	0013      	movs	r3, r2
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7e:	2201      	movs	r2, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	43da      	mvns	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	2201      	movs	r2, #1
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2203      	movs	r2, #3
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d017      	beq.n	8000fe6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2203      	movs	r2, #3
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d123      	bne.n	800103a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	58d3      	ldr	r3, [r2, r3]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	2207      	movs	r2, #7
 8001004:	4013      	ands	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	43da      	mvns	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	2107      	movs	r1, #7
 800101e:	400b      	ands	r3, r1
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	6939      	ldr	r1, [r7, #16]
 8001038:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	43da      	mvns	r2, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2203      	movs	r2, #3
 8001058:	401a      	ands	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	23c0      	movs	r3, #192	; 0xc0
 8001074:	029b      	lsls	r3, r3, #10
 8001076:	4013      	ands	r3, r2
 8001078:	d100      	bne.n	800107c <HAL_GPIO_Init+0x174>
 800107a:	e092      	b.n	80011a2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800107c:	4a50      	ldr	r2, [pc, #320]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3318      	adds	r3, #24
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	589b      	ldr	r3, [r3, r2]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2203      	movs	r2, #3
 800108e:	4013      	ands	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	220f      	movs	r2, #15
 8001094:	409a      	lsls	r2, r3
 8001096:	0013      	movs	r3, r2
 8001098:	43da      	mvns	r2, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	23a0      	movs	r3, #160	; 0xa0
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x1ca>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a45      	ldr	r2, [pc, #276]	; (80011c4 <HAL_GPIO_Init+0x2bc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x1c6>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a44      	ldr	r2, [pc, #272]	; (80011c8 <HAL_GPIO_Init+0x2c0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x1c2>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a43      	ldr	r2, [pc, #268]	; (80011cc <HAL_GPIO_Init+0x2c4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x1be>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x1cc>
 80010c6:	2305      	movs	r3, #5
 80010c8:	e004      	b.n	80010d4 <HAL_GPIO_Init+0x1cc>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_Init+0x1cc>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x1cc>
 80010d2:	2300      	movs	r3, #0
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	2103      	movs	r1, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	00d2      	lsls	r2, r2, #3
 80010dc:	4093      	lsls	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010e4:	4936      	ldr	r1, [pc, #216]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3318      	adds	r3, #24
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010f2:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	58d3      	ldr	r3, [r2, r3]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43da      	mvns	r2, r3
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	025b      	lsls	r3, r3, #9
 800110c:	4013      	ands	r3, r2
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001118:	4929      	ldr	r1, [pc, #164]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 8001122:	2384      	movs	r3, #132	; 0x84
 8001124:	58d3      	ldr	r3, [r2, r3]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	029b      	lsls	r3, r3, #10
 800113a:	4013      	ands	r3, r2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001146:	491e      	ldr	r1, [pc, #120]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 8001148:	2284      	movs	r2, #132	; 0x84
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	035b      	lsls	r3, r3, #13
 8001166:	4013      	ands	r3, r2
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43da      	mvns	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	039b      	lsls	r3, r3, #14
 8001190:	4013      	ands	r3, r2
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3301      	adds	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	40da      	lsrs	r2, r3
 80011b0:	1e13      	subs	r3, r2, #0
 80011b2:	d000      	beq.n	80011b6 <HAL_GPIO_Init+0x2ae>
 80011b4:	e6b0      	b.n	8000f18 <HAL_GPIO_Init+0x10>
  }
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b006      	add	sp, #24
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021800 	.word	0x40021800
 80011c4:	50000400 	.word	0x50000400
 80011c8:	50000800 	.word	0x50000800
 80011cc:	50000c00 	.word	0x50000c00

080011d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	0002      	movs	r2, r0
 80011d8:	1dbb      	adds	r3, r7, #6
 80011da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	1dba      	adds	r2, r7, #6
 80011e2:	8812      	ldrh	r2, [r2, #0]
 80011e4:	4013      	ands	r3, r2
 80011e6:	d008      	beq.n	80011fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80011ea:	1dba      	adds	r2, r7, #6
 80011ec:	8812      	ldrh	r2, [r2, #0]
 80011ee:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80011f0:	1dbb      	adds	r3, r7, #6
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 f815 	bl	8001224 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	1dba      	adds	r2, r7, #6
 8001200:	8812      	ldrh	r2, [r2, #0]
 8001202:	4013      	ands	r3, r2
 8001204:	d008      	beq.n	8001218 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001208:	1dba      	adds	r2, r7, #6
 800120a:	8812      	ldrh	r2, [r2, #0]
 800120c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800120e:	1dbb      	adds	r3, r7, #6
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	0018      	movs	r0, r3
 8001214:	f000 f810 	bl	8001238 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021800 	.word	0x40021800

08001224 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	0002      	movs	r2, r0
 800122c:	1dbb      	adds	r3, r7, #6
 800122e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	0002      	movs	r2, r0
 8001240:	1dbb      	adds	r3, r7, #6
 8001242:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a19      	ldr	r2, [pc, #100]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800125a:	4013      	ands	r3, r2
 800125c:	0019      	movs	r1, r3
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	429a      	cmp	r2, r3
 800126e:	d11f      	bne.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	0013      	movs	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	189b      	adds	r3, r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4912      	ldr	r1, [pc, #72]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800127e:	0018      	movs	r0, r3
 8001280:	f7fe ff50 	bl	8000124 <__udivsi3>
 8001284:	0003      	movs	r3, r0
 8001286:	3301      	adds	r3, #1
 8001288:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128a:	e008      	b.n	800129e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3b01      	subs	r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	e001      	b.n	800129e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e009      	b.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012a0:	695a      	ldr	r2, [r3, #20]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	401a      	ands	r2, r3
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d0ed      	beq.n	800128c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b004      	add	sp, #16
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	40007000 	.word	0x40007000
 80012c0:	fffff9ff 	.word	0xfffff9ff
 80012c4:	20000004 	.word	0x20000004
 80012c8:	000f4240 	.word	0x000f4240

080012cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	23e0      	movs	r3, #224	; 0xe0
 80012d6:	01db      	lsls	r3, r3, #7
 80012d8:	4013      	ands	r3, r2
}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e2f9      	b.n	80018ea <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2201      	movs	r2, #1
 80012fc:	4013      	ands	r3, r2
 80012fe:	d100      	bne.n	8001302 <HAL_RCC_OscConfig+0x1e>
 8001300:	e07c      	b.n	80013fc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001302:	4bc3      	ldr	r3, [pc, #780]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2238      	movs	r2, #56	; 0x38
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800130c:	4bc0      	ldr	r3, [pc, #768]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2203      	movs	r2, #3
 8001312:	4013      	ands	r3, r2
 8001314:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	2b10      	cmp	r3, #16
 800131a:	d102      	bne.n	8001322 <HAL_RCC_OscConfig+0x3e>
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d002      	beq.n	8001328 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b08      	cmp	r3, #8
 8001326:	d10b      	bne.n	8001340 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	4bb9      	ldr	r3, [pc, #740]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	029b      	lsls	r3, r3, #10
 8001330:	4013      	ands	r3, r2
 8001332:	d062      	beq.n	80013fa <HAL_RCC_OscConfig+0x116>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d15e      	bne.n	80013fa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e2d4      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	025b      	lsls	r3, r3, #9
 8001348:	429a      	cmp	r2, r3
 800134a:	d107      	bne.n	800135c <HAL_RCC_OscConfig+0x78>
 800134c:	4bb0      	ldr	r3, [pc, #704]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4baf      	ldr	r3, [pc, #700]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001352:	2180      	movs	r1, #128	; 0x80
 8001354:	0249      	lsls	r1, r1, #9
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e020      	b.n	800139e <HAL_RCC_OscConfig+0xba>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	23a0      	movs	r3, #160	; 0xa0
 8001362:	02db      	lsls	r3, r3, #11
 8001364:	429a      	cmp	r2, r3
 8001366:	d10e      	bne.n	8001386 <HAL_RCC_OscConfig+0xa2>
 8001368:	4ba9      	ldr	r3, [pc, #676]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4ba8      	ldr	r3, [pc, #672]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800136e:	2180      	movs	r1, #128	; 0x80
 8001370:	02c9      	lsls	r1, r1, #11
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	4ba6      	ldr	r3, [pc, #664]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4ba5      	ldr	r3, [pc, #660]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	0249      	lsls	r1, r1, #9
 8001380:	430a      	orrs	r2, r1
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e00b      	b.n	800139e <HAL_RCC_OscConfig+0xba>
 8001386:	4ba2      	ldr	r3, [pc, #648]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4ba1      	ldr	r3, [pc, #644]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800138c:	49a1      	ldr	r1, [pc, #644]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 800138e:	400a      	ands	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	4b9f      	ldr	r3, [pc, #636]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b9e      	ldr	r3, [pc, #632]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001398:	499f      	ldr	r1, [pc, #636]	; (8001618 <HAL_RCC_OscConfig+0x334>)
 800139a:	400a      	ands	r2, r1
 800139c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d014      	beq.n	80013d0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fca3 	bl	8000cf0 <HAL_GetTick>
 80013aa:	0003      	movs	r3, r0
 80013ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fc9e 	bl	8000cf0 <HAL_GetTick>
 80013b4:	0002      	movs	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e293      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c2:	4b93      	ldr	r3, [pc, #588]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	029b      	lsls	r3, r3, #10
 80013ca:	4013      	ands	r3, r2
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0xcc>
 80013ce:	e015      	b.n	80013fc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc8e 	bl	8000cf0 <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013da:	f7ff fc89 	bl	8000cf0 <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b64      	cmp	r3, #100	; 0x64
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e27e      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ec:	4b88      	ldr	r3, [pc, #544]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	029b      	lsls	r3, r3, #10
 80013f4:	4013      	ands	r3, r2
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0xf6>
 80013f8:	e000      	b.n	80013fc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2202      	movs	r2, #2
 8001402:	4013      	ands	r3, r2
 8001404:	d100      	bne.n	8001408 <HAL_RCC_OscConfig+0x124>
 8001406:	e099      	b.n	800153c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001408:	4b81      	ldr	r3, [pc, #516]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2238      	movs	r2, #56	; 0x38
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001412:	4b7f      	ldr	r3, [pc, #508]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2203      	movs	r2, #3
 8001418:	4013      	ands	r3, r2
 800141a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2b10      	cmp	r3, #16
 8001420:	d102      	bne.n	8001428 <HAL_RCC_OscConfig+0x144>
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d002      	beq.n	800142e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d135      	bne.n	800149a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800142e:	4b78      	ldr	r3, [pc, #480]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4013      	ands	r3, r2
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x162>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e251      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001446:	4b72      	ldr	r3, [pc, #456]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4a74      	ldr	r2, [pc, #464]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800144c:	4013      	ands	r3, r2
 800144e:	0019      	movs	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	021a      	lsls	r2, r3, #8
 8001456:	4b6e      	ldr	r3, [pc, #440]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001458:	430a      	orrs	r2, r1
 800145a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d112      	bne.n	8001488 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001462:	4b6b      	ldr	r3, [pc, #428]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a6e      	ldr	r2, [pc, #440]	; (8001620 <HAL_RCC_OscConfig+0x33c>)
 8001468:	4013      	ands	r3, r2
 800146a:	0019      	movs	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	4b67      	ldr	r3, [pc, #412]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001472:	430a      	orrs	r2, r1
 8001474:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001476:	4b66      	ldr	r3, [pc, #408]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	0adb      	lsrs	r3, r3, #11
 800147c:	2207      	movs	r2, #7
 800147e:	4013      	ands	r3, r2
 8001480:	4a68      	ldr	r2, [pc, #416]	; (8001624 <HAL_RCC_OscConfig+0x340>)
 8001482:	40da      	lsrs	r2, r3
 8001484:	4b68      	ldr	r3, [pc, #416]	; (8001628 <HAL_RCC_OscConfig+0x344>)
 8001486:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001488:	4b68      	ldr	r3, [pc, #416]	; (800162c <HAL_RCC_OscConfig+0x348>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff fbd3 	bl	8000c38 <HAL_InitTick>
 8001492:	1e03      	subs	r3, r0, #0
 8001494:	d051      	beq.n	800153a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e227      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d030      	beq.n	8001504 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014a2:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a5e      	ldr	r2, [pc, #376]	; (8001620 <HAL_RCC_OscConfig+0x33c>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	0019      	movs	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	4b57      	ldr	r3, [pc, #348]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014b2:	430a      	orrs	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014b6:	4b56      	ldr	r3, [pc, #344]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b55      	ldr	r3, [pc, #340]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	0049      	lsls	r1, r1, #1
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc14 	bl	8000cf0 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fc0f 	bl	8000cf0 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e204      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e0:	4b4b      	ldr	r3, [pc, #300]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4013      	ands	r3, r2
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b48      	ldr	r3, [pc, #288]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a4a      	ldr	r2, [pc, #296]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	021a      	lsls	r2, r3, #8
 80014fc:	4b44      	ldr	r3, [pc, #272]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	e01b      	b.n	800153c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001504:	4b42      	ldr	r3, [pc, #264]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b41      	ldr	r3, [pc, #260]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800150a:	4949      	ldr	r1, [pc, #292]	; (8001630 <HAL_RCC_OscConfig+0x34c>)
 800150c:	400a      	ands	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fbee 	bl	8000cf0 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fbe9 	bl	8000cf0 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1de      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800152c:	4b38      	ldr	r3, [pc, #224]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4013      	ands	r3, r2
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x236>
 8001538:	e000      	b.n	800153c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2208      	movs	r2, #8
 8001542:	4013      	ands	r3, r2
 8001544:	d047      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001546:	4b32      	ldr	r3, [pc, #200]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2238      	movs	r2, #56	; 0x38
 800154c:	4013      	ands	r3, r2
 800154e:	2b18      	cmp	r3, #24
 8001550:	d10a      	bne.n	8001568 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	2202      	movs	r2, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d03c      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d138      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e1c0      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d019      	beq.n	80015a4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001572:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001576:	2101      	movs	r1, #1
 8001578:	430a      	orrs	r2, r1
 800157a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fbb8 	bl	8000cf0 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001586:	f7ff fbb3 	bl	8000cf0 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e1a8      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800159a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d0f1      	beq.n	8001586 <HAL_RCC_OscConfig+0x2a2>
 80015a2:	e018      	b.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80015a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	438a      	bics	r2, r1
 80015ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb9e 	bl	8000cf0 <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff fb99 	bl	8000cf0 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e18e      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d0:	2202      	movs	r2, #2
 80015d2:	4013      	ands	r3, r2
 80015d4:	d1f1      	bne.n	80015ba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2204      	movs	r2, #4
 80015dc:	4013      	ands	r3, r2
 80015de:	d100      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2fe>
 80015e0:	e0c6      	b.n	8001770 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	231f      	movs	r3, #31
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2238      	movs	r2, #56	; 0x38
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	d11e      	bne.n	8001634 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fa:	2202      	movs	r2, #2
 80015fc:	4013      	ands	r3, r2
 80015fe:	d100      	bne.n	8001602 <HAL_RCC_OscConfig+0x31e>
 8001600:	e0b6      	b.n	8001770 <HAL_RCC_OscConfig+0x48c>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d000      	beq.n	800160c <HAL_RCC_OscConfig+0x328>
 800160a:	e0b1      	b.n	8001770 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e16c      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
 8001610:	40021000 	.word	0x40021000
 8001614:	fffeffff 	.word	0xfffeffff
 8001618:	fffbffff 	.word	0xfffbffff
 800161c:	ffff80ff 	.word	0xffff80ff
 8001620:	ffffc7ff 	.word	0xffffc7ff
 8001624:	00f42400 	.word	0x00f42400
 8001628:	20000004 	.word	0x20000004
 800162c:	20000008 	.word	0x20000008
 8001630:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001634:	4baf      	ldr	r3, [pc, #700]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	055b      	lsls	r3, r3, #21
 800163c:	4013      	ands	r3, r2
 800163e:	d101      	bne.n	8001644 <HAL_RCC_OscConfig+0x360>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x362>
 8001644:	2300      	movs	r3, #0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d011      	beq.n	800166e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4baa      	ldr	r3, [pc, #680]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 800164c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800164e:	4ba9      	ldr	r3, [pc, #676]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	0549      	lsls	r1, r1, #21
 8001654:	430a      	orrs	r2, r1
 8001656:	63da      	str	r2, [r3, #60]	; 0x3c
 8001658:	4ba6      	ldr	r3, [pc, #664]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 800165a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	055b      	lsls	r3, r3, #21
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001666:	231f      	movs	r3, #31
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166e:	4ba2      	ldr	r3, [pc, #648]	; (80018f8 <HAL_RCC_OscConfig+0x614>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4013      	ands	r3, r2
 8001678:	d11a      	bne.n	80016b0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800167a:	4b9f      	ldr	r3, [pc, #636]	; (80018f8 <HAL_RCC_OscConfig+0x614>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b9e      	ldr	r3, [pc, #632]	; (80018f8 <HAL_RCC_OscConfig+0x614>)
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	0049      	lsls	r1, r1, #1
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb32 	bl	8000cf0 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001692:	f7ff fb2d 	bl	8000cf0 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e122      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a4:	4b94      	ldr	r3, [pc, #592]	; (80018f8 <HAL_RCC_OscConfig+0x614>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0x3e2>
 80016b8:	4b8e      	ldr	r3, [pc, #568]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80016ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016bc:	4b8d      	ldr	r3, [pc, #564]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80016be:	2101      	movs	r1, #1
 80016c0:	430a      	orrs	r2, r1
 80016c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80016c4:	e01c      	b.n	8001700 <HAL_RCC_OscConfig+0x41c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x404>
 80016ce:	4b89      	ldr	r3, [pc, #548]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80016d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016d2:	4b88      	ldr	r3, [pc, #544]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80016d4:	2104      	movs	r1, #4
 80016d6:	430a      	orrs	r2, r1
 80016d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80016da:	4b86      	ldr	r3, [pc, #536]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80016dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016de:	4b85      	ldr	r3, [pc, #532]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	430a      	orrs	r2, r1
 80016e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0x41c>
 80016e8:	4b82      	ldr	r3, [pc, #520]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80016ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ec:	4b81      	ldr	r3, [pc, #516]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	438a      	bics	r2, r1
 80016f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80016f4:	4b7f      	ldr	r3, [pc, #508]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80016f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f8:	4b7e      	ldr	r3, [pc, #504]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80016fa:	2104      	movs	r1, #4
 80016fc:	438a      	bics	r2, r1
 80016fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d014      	beq.n	8001732 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff faf2 	bl	8000cf0 <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001710:	e009      	b.n	8001726 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff faed 	bl	8000cf0 <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	4a77      	ldr	r2, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0x618>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e0e1      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001726:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172a:	2202      	movs	r2, #2
 800172c:	4013      	ands	r3, r2
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x42e>
 8001730:	e013      	b.n	800175a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001732:	f7ff fadd 	bl	8000cf0 <HAL_GetTick>
 8001736:	0003      	movs	r3, r0
 8001738:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800173a:	e009      	b.n	8001750 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff fad8 	bl	8000cf0 <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	4a6d      	ldr	r2, [pc, #436]	; (80018fc <HAL_RCC_OscConfig+0x618>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0cc      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001750:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001754:	2202      	movs	r2, #2
 8001756:	4013      	ands	r3, r2
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800175a:	231f      	movs	r3, #31
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001768:	4b62      	ldr	r3, [pc, #392]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 800176a:	4965      	ldr	r1, [pc, #404]	; (8001900 <HAL_RCC_OscConfig+0x61c>)
 800176c:	400a      	ands	r2, r1
 800176e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d100      	bne.n	800177a <HAL_RCC_OscConfig+0x496>
 8001778:	e0b6      	b.n	80018e8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177a:	4b5e      	ldr	r3, [pc, #376]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2238      	movs	r2, #56	; 0x38
 8001780:	4013      	ands	r3, r2
 8001782:	2b10      	cmp	r3, #16
 8001784:	d100      	bne.n	8001788 <HAL_RCC_OscConfig+0x4a4>
 8001786:	e07e      	b.n	8001886 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d153      	bne.n	8001838 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001790:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b57      	ldr	r3, [pc, #348]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001796:	495b      	ldr	r1, [pc, #364]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001798:	400a      	ands	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff faa8 	bl	8000cf0 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff faa3 	bl	8000cf0 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e098      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b8:	4b4e      	ldr	r3, [pc, #312]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	049b      	lsls	r3, r3, #18
 80017c0:	4013      	ands	r3, r2
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c4:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4a4f      	ldr	r2, [pc, #316]	; (8001908 <HAL_RCC_OscConfig+0x624>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	0019      	movs	r1, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1a      	ldr	r2, [r3, #32]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	431a      	orrs	r2, r3
 80017ec:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80017ee:	430a      	orrs	r2, r1
 80017f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f2:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	0449      	lsls	r1, r1, #17
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001800:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0549      	lsls	r1, r1, #21
 800180a:	430a      	orrs	r2, r1
 800180c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff fa6f 	bl	8000cf0 <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff fa6a 	bl	8000cf0 <HAL_GetTick>
 800181c:	0002      	movs	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e05f      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182a:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	049b      	lsls	r3, r3, #18
 8001832:	4013      	ands	r3, r2
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x534>
 8001836:	e057      	b.n	80018e8 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001838:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 800183e:	4931      	ldr	r1, [pc, #196]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001840:	400a      	ands	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 800184a:	2103      	movs	r1, #3
 800184c:	438a      	bics	r2, r1
 800184e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001856:	492d      	ldr	r1, [pc, #180]	; (800190c <HAL_RCC_OscConfig+0x628>)
 8001858:	400a      	ands	r2, r1
 800185a:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fa48 	bl	8000cf0 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff fa43 	bl	8000cf0 <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e038      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	049b      	lsls	r3, r3, #18
 8001880:	4013      	ands	r3, r2
 8001882:	d1f0      	bne.n	8001866 <HAL_RCC_OscConfig+0x582>
 8001884:	e030      	b.n	80018e8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e02b      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_RCC_OscConfig+0x610>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2203      	movs	r2, #3
 800189c:	401a      	ands	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d11e      	bne.n	80018e4 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2270      	movs	r2, #112	; 0x70
 80018aa:	401a      	ands	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d117      	bne.n	80018e4 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	23fe      	movs	r3, #254	; 0xfe
 80018b8:	01db      	lsls	r3, r3, #7
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d10e      	bne.n	80018e4 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	23f8      	movs	r3, #248	; 0xf8
 80018ca:	039b      	lsls	r3, r3, #14
 80018cc:	401a      	ands	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d106      	bne.n	80018e4 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	0f5b      	lsrs	r3, r3, #29
 80018da:	075a      	lsls	r2, r3, #29
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b008      	add	sp, #32
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40007000 	.word	0x40007000
 80018fc:	00001388 	.word	0x00001388
 8001900:	efffffff 	.word	0xefffffff
 8001904:	feffffff 	.word	0xfeffffff
 8001908:	1fc1808c 	.word	0x1fc1808c
 800190c:	effeffff 	.word	0xeffeffff

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0e9      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2207      	movs	r2, #7
 800192a:	4013      	ands	r3, r2
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d91e      	bls.n	8001970 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2207      	movs	r2, #7
 8001938:	4393      	bics	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001944:	f7ff f9d4 	bl	8000cf0 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800194c:	e009      	b.n	8001962 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194e:	f7ff f9cf 	bl	8000cf0 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <HAL_RCC_ClockConfig+0x1f4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0ca      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001962:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2207      	movs	r2, #7
 8001968:	4013      	ands	r3, r2
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d1ee      	bne.n	800194e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d015      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2204      	movs	r2, #4
 8001980:	4013      	ands	r3, r2
 8001982:	d006      	beq.n	8001992 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001984:	4b60      	ldr	r3, [pc, #384]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 800198a:	21e0      	movs	r1, #224	; 0xe0
 800198c:	01c9      	lsls	r1, r1, #7
 800198e:	430a      	orrs	r2, r1
 8001990:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	4a5d      	ldr	r2, [pc, #372]	; (8001b0c <HAL_RCC_ClockConfig+0x1fc>)
 8001998:	4013      	ands	r3, r2
 800199a:	0019      	movs	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4b59      	ldr	r3, [pc, #356]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2201      	movs	r2, #1
 80019ac:	4013      	ands	r3, r2
 80019ae:	d057      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	029b      	lsls	r3, r3, #10
 80019c0:	4013      	ands	r3, r2
 80019c2:	d12b      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e097      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d107      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d0:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	049b      	lsls	r3, r3, #18
 80019d8:	4013      	ands	r3, r2
 80019da:	d11f      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e08b      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e8:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4013      	ands	r3, r2
 80019f2:	d113      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e07f      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a00:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a04:	2202      	movs	r2, #2
 8001a06:	4013      	ands	r3, r2
 8001a08:	d108      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e074      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e06d      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a1c:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2207      	movs	r2, #7
 8001a22:	4393      	bics	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a30:	f7ff f95e 	bl	8000cf0 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a38:	e009      	b.n	8001a4e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3a:	f7ff f959 	bl	8000cf0 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4a2f      	ldr	r2, [pc, #188]	; (8001b04 <HAL_RCC_ClockConfig+0x1f4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e054      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2238      	movs	r2, #56	; 0x38
 8001a54:	401a      	ands	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1ec      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2207      	movs	r2, #7
 8001a66:	4013      	ands	r3, r2
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d21e      	bcs.n	8001aac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2207      	movs	r2, #7
 8001a74:	4393      	bics	r3, r2
 8001a76:	0019      	movs	r1, r3
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a80:	f7ff f936 	bl	8000cf0 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a88:	e009      	b.n	8001a9e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8a:	f7ff f931 	bl	8000cf0 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <HAL_RCC_ClockConfig+0x1f4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e02c      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d1ee      	bne.n	8001a8a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <HAL_RCC_ClockConfig+0x200>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001aca:	f000 f829 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ace:	0001      	movs	r1, r0
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	401a      	ands	r2, r3
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_RCC_ClockConfig+0x204>)
 8001adc:	0092      	lsls	r2, r2, #2
 8001ade:	58d3      	ldr	r3, [r2, r3]
 8001ae0:	221f      	movs	r2, #31
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	000a      	movs	r2, r1
 8001ae6:	40da      	lsrs	r2, r3
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_RCC_ClockConfig+0x208>)
 8001aea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_ClockConfig+0x20c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff f8a1 	bl	8000c38 <HAL_InitTick>
 8001af6:	0003      	movs	r3, r0
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40022000 	.word	0x40022000
 8001b04:	00001388 	.word	0x00001388
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	fffff0ff 	.word	0xfffff0ff
 8001b10:	ffff8fff 	.word	0xffff8fff
 8001b14:	080032b0 	.word	0x080032b0
 8001b18:	20000004 	.word	0x20000004
 8001b1c:	20000008 	.word	0x20000008

08001b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b26:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2238      	movs	r2, #56	; 0x38
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d10f      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b30:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0adb      	lsrs	r3, r3, #11
 8001b36:	2207      	movs	r2, #7
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	0013      	movs	r3, r2
 8001b40:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b42:	6839      	ldr	r1, [r7, #0]
 8001b44:	4835      	ldr	r0, [pc, #212]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b46:	f7fe faed 	bl	8000124 <__udivsi3>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	e05d      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b50:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2238      	movs	r2, #56	; 0x38
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b5c:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	e054      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b62:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2238      	movs	r2, #56	; 0x38
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d138      	bne.n	8001be0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2203      	movs	r2, #3
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	2207      	movs	r2, #7
 8001b80:	4013      	ands	r3, r2
 8001b82:	3301      	adds	r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d10d      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	4824      	ldr	r0, [pc, #144]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b90:	f7fe fac8 	bl	8000124 <__udivsi3>
 8001b94:	0003      	movs	r3, r0
 8001b96:	0019      	movs	r1, r3
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	227f      	movs	r2, #127	; 0x7f
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	434b      	muls	r3, r1
 8001ba4:	617b      	str	r3, [r7, #20]
        break;
 8001ba6:	e00d      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	481c      	ldr	r0, [pc, #112]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bac:	f7fe faba 	bl	8000124 <__udivsi3>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	227f      	movs	r2, #127	; 0x7f
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	434b      	muls	r3, r1
 8001bc0:	617b      	str	r3, [r7, #20]
        break;
 8001bc2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0f5b      	lsrs	r3, r3, #29
 8001bca:	2207      	movs	r2, #7
 8001bcc:	4013      	ands	r3, r2
 8001bce:	3301      	adds	r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	6978      	ldr	r0, [r7, #20]
 8001bd6:	f7fe faa5 	bl	8000124 <__udivsi3>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	e015      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2238      	movs	r2, #56	; 0x38
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d103      	bne.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2238      	movs	r2, #56	; 0x38
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b18      	cmp	r3, #24
 8001bfe:	d103      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c00:	23fa      	movs	r3, #250	; 0xfa
 8001c02:	01db      	lsls	r3, r3, #7
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	e001      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c0c:	693b      	ldr	r3, [r7, #16]
}
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b006      	add	sp, #24
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	00f42400 	.word	0x00f42400
 8001c20:	007a1200 	.word	0x007a1200

08001c24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c3c:	f7ff fff2 	bl	8001c24 <HAL_RCC_GetHCLKFreq>
 8001c40:	0004      	movs	r4, r0
 8001c42:	f7ff fb43 	bl	80012cc <LL_RCC_GetAPB1Prescaler>
 8001c46:	0003      	movs	r3, r0
 8001c48:	0b1a      	lsrs	r2, r3, #12
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	58d3      	ldr	r3, [r2, r3]
 8001c50:	221f      	movs	r2, #31
 8001c52:	4013      	ands	r3, r2
 8001c54:	40dc      	lsrs	r4, r3
 8001c56:	0023      	movs	r3, r4
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	080032f0 	.word	0x080032f0

08001c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c6c:	2313      	movs	r3, #19
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c74:	2312      	movs	r3, #18
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	029b      	lsls	r3, r3, #10
 8001c84:	4013      	ands	r3, r2
 8001c86:	d100      	bne.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c88:	e0a3      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8a:	2011      	movs	r0, #17
 8001c8c:	183b      	adds	r3, r7, r0
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c92:	4b7f      	ldr	r3, [pc, #508]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	055b      	lsls	r3, r3, #21
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d110      	bne.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b7c      	ldr	r3, [pc, #496]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ca0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ca2:	4b7b      	ldr	r3, [pc, #492]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0549      	lsls	r1, r1, #21
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cac:	4b78      	ldr	r3, [pc, #480]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	055b      	lsls	r3, r3, #21
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cba:	183b      	adds	r3, r7, r0
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cc0:	4b74      	ldr	r3, [pc, #464]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b73      	ldr	r3, [pc, #460]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	0049      	lsls	r1, r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cce:	f7ff f80f 	bl	8000cf0 <HAL_GetTick>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd8:	f7ff f80a 	bl	8000cf0 <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d904      	bls.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001ce6:	2313      	movs	r3, #19
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2203      	movs	r2, #3
 8001cec:	701a      	strb	r2, [r3, #0]
        break;
 8001cee:	e005      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cf0:	4b68      	ldr	r3, [pc, #416]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d0ed      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001cfc:	2313      	movs	r3, #19
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d154      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d06:	4b62      	ldr	r3, [pc, #392]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d0a:	23c0      	movs	r3, #192	; 0xc0
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d019      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d014      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d22:	4b5b      	ldr	r3, [pc, #364]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	4a5c      	ldr	r2, [pc, #368]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d2c:	4b58      	ldr	r3, [pc, #352]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d30:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	0249      	lsls	r1, r1, #9
 8001d36:	430a      	orrs	r2, r1
 8001d38:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d3a:	4b55      	ldr	r3, [pc, #340]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d3e:	4b54      	ldr	r3, [pc, #336]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d40:	4956      	ldr	r1, [pc, #344]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d46:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4013      	ands	r3, r2
 8001d52:	d016      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7fe ffcc 	bl	8000cf0 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5c:	e00c      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7fe ffc7 	bl	8000cf0 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	4a4d      	ldr	r2, [pc, #308]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d904      	bls.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d6e:	2313      	movs	r3, #19
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	2203      	movs	r2, #3
 8001d74:	701a      	strb	r2, [r3, #0]
            break;
 8001d76:	e004      	b.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d78:	4b45      	ldr	r3, [pc, #276]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d0ed      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d82:	2313      	movs	r3, #19
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10a      	bne.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d8c:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	4a41      	ldr	r2, [pc, #260]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001da0:	e00c      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001da2:	2312      	movs	r3, #18
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	2213      	movs	r2, #19
 8001da8:	18ba      	adds	r2, r7, r2
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	e005      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001db0:	2312      	movs	r3, #18
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	2213      	movs	r2, #19
 8001db6:	18ba      	adds	r2, r7, r2
 8001db8:	7812      	ldrb	r2, [r2, #0]
 8001dba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dbc:	2311      	movs	r3, #17
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d105      	bne.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc6:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001dcc:	4935      	ldr	r1, [pc, #212]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dce:	400a      	ands	r2, r1
 8001dd0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d009      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ddc:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	2203      	movs	r2, #3
 8001de2:	4393      	bics	r3, r2
 8001de4:	0019      	movs	r1, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001dec:	430a      	orrs	r2, r1
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2220      	movs	r2, #32
 8001df6:	4013      	ands	r3, r2
 8001df8:	d009      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	4a2a      	ldr	r2, [pc, #168]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	0019      	movs	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	01db      	lsls	r3, r3, #7
 8001e16:	4013      	ands	r3, r2
 8001e18:	d015      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	0899      	lsrs	r1, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	05db      	lsls	r3, r3, #23
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d106      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	0249      	lsls	r1, r1, #9
 8001e42:	430a      	orrs	r2, r1
 8001e44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d016      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	01db      	lsls	r3, r3, #7
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d106      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e78:	2180      	movs	r1, #128	; 0x80
 8001e7a:	0249      	lsls	r1, r1, #9
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001e80:	2312      	movs	r3, #18
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	781b      	ldrb	r3, [r3, #0]
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b006      	add	sp, #24
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40007000 	.word	0x40007000
 8001e98:	fffffcff 	.word	0xfffffcff
 8001e9c:	fffeffff 	.word	0xfffeffff
 8001ea0:	00001388 	.word	0x00001388
 8001ea4:	efffffff 	.word	0xefffffff
 8001ea8:	ffffcfff 	.word	0xffffcfff
 8001eac:	ffff3fff 	.word	0xffff3fff

08001eb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e046      	b.n	8001f50 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2284      	movs	r2, #132	; 0x84
 8001ec6:	589b      	ldr	r3, [r3, r2]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7fe fc68 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2284      	movs	r2, #132	; 0x84
 8001ee0:	2124      	movs	r1, #36	; 0x24
 8001ee2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2101      	movs	r1, #1
 8001ef0:	438a      	bics	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f000 f8dc 	bl	80020b4 <UART_SetConfig>
 8001efc:	0003      	movs	r3, r0
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e024      	b.n	8001f50 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	0018      	movs	r0, r3
 8001f12:	f000 fa39 	bl	8002388 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	490d      	ldr	r1, [pc, #52]	; (8001f58 <HAL_UART_Init+0xa8>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	212a      	movs	r1, #42	; 0x2a
 8001f32:	438a      	bics	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2101      	movs	r1, #1
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 fad1 	bl	80024f0 <UART_CheckIdleState>
 8001f4e:	0003      	movs	r3, r0
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b002      	add	sp, #8
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	ffffb7ff 	.word	0xffffb7ff

08001f5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	1dbb      	adds	r3, r7, #6
 8001f6a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2284      	movs	r2, #132	; 0x84
 8001f70:	589b      	ldr	r3, [r3, r2]
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d000      	beq.n	8001f78 <HAL_UART_Transmit+0x1c>
 8001f76:	e097      	b.n	80020a8 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_UART_Transmit+0x2a>
 8001f7e:	1dbb      	adds	r3, r7, #6
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e08f      	b.n	80020aa <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	015b      	lsls	r3, r3, #5
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d109      	bne.n	8001faa <HAL_UART_Transmit+0x4e>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d105      	bne.n	8001faa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d001      	beq.n	8001faa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e07f      	b.n	80020aa <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2280      	movs	r2, #128	; 0x80
 8001fae:	5c9b      	ldrb	r3, [r3, r2]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_UART_Transmit+0x5c>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e078      	b.n	80020aa <HAL_UART_Transmit+0x14e>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	228c      	movs	r2, #140	; 0x8c
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2284      	movs	r2, #132	; 0x84
 8001fcc:	2121      	movs	r1, #33	; 0x21
 8001fce:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fd0:	f7fe fe8e 	bl	8000cf0 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1dba      	adds	r2, r7, #6
 8001fdc:	2154      	movs	r1, #84	; 0x54
 8001fde:	8812      	ldrh	r2, [r2, #0]
 8001fe0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1dba      	adds	r2, r7, #6
 8001fe6:	2156      	movs	r1, #86	; 0x56
 8001fe8:	8812      	ldrh	r2, [r2, #0]
 8001fea:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	015b      	lsls	r3, r3, #5
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d108      	bne.n	800200a <HAL_UART_Transmit+0xae>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d104      	bne.n	800200a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	e003      	b.n	8002012 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	2100      	movs	r1, #0
 8002018:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800201a:	e02c      	b.n	8002076 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	0013      	movs	r3, r2
 8002026:	2200      	movs	r2, #0
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	f000 faab 	bl	8002584 <UART_WaitOnFlagUntilTimeout>
 800202e:	1e03      	subs	r3, r0, #0
 8002030:	d001      	beq.n	8002036 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e039      	b.n	80020aa <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10b      	bne.n	8002054 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	001a      	movs	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	05d2      	lsls	r2, r2, #23
 8002048:	0dd2      	lsrs	r2, r2, #23
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	3302      	adds	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	e007      	b.n	8002064 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3301      	adds	r3, #1
 8002062:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2256      	movs	r2, #86	; 0x56
 8002068:	5a9b      	ldrh	r3, [r3, r2]
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b299      	uxth	r1, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2256      	movs	r2, #86	; 0x56
 8002074:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2256      	movs	r2, #86	; 0x56
 800207a:	5a9b      	ldrh	r3, [r3, r2]
 800207c:	b29b      	uxth	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1cc      	bne.n	800201c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	0013      	movs	r3, r2
 800208c:	2200      	movs	r2, #0
 800208e:	2140      	movs	r1, #64	; 0x40
 8002090:	f000 fa78 	bl	8002584 <UART_WaitOnFlagUntilTimeout>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d001      	beq.n	800209c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e006      	b.n	80020aa <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2284      	movs	r2, #132	; 0x84
 80020a0:	2120      	movs	r1, #32
 80020a2:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e000      	b.n	80020aa <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80020a8:	2302      	movs	r3, #2
  }
}
 80020aa:	0018      	movs	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b008      	add	sp, #32
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020bc:	231a      	movs	r3, #26
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4aa1      	ldr	r2, [pc, #644]	; (8002368 <UART_SetConfig+0x2b4>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a9c      	ldr	r2, [pc, #624]	; (800236c <UART_SetConfig+0x2b8>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	4313      	orrs	r3, r2
 8002118:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4a93      	ldr	r2, [pc, #588]	; (8002370 <UART_SetConfig+0x2bc>)
 8002122:	4013      	ands	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	220f      	movs	r2, #15
 8002138:	4393      	bics	r3, r2
 800213a:	0019      	movs	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a89      	ldr	r2, [pc, #548]	; (8002374 <UART_SetConfig+0x2c0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d127      	bne.n	80021a2 <UART_SetConfig+0xee>
 8002152:	4b89      	ldr	r3, [pc, #548]	; (8002378 <UART_SetConfig+0x2c4>)
 8002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002156:	2203      	movs	r2, #3
 8002158:	4013      	ands	r3, r2
 800215a:	2b03      	cmp	r3, #3
 800215c:	d017      	beq.n	800218e <UART_SetConfig+0xda>
 800215e:	d81b      	bhi.n	8002198 <UART_SetConfig+0xe4>
 8002160:	2b02      	cmp	r3, #2
 8002162:	d00a      	beq.n	800217a <UART_SetConfig+0xc6>
 8002164:	d818      	bhi.n	8002198 <UART_SetConfig+0xe4>
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <UART_SetConfig+0xbc>
 800216a:	2b01      	cmp	r3, #1
 800216c:	d00a      	beq.n	8002184 <UART_SetConfig+0xd0>
 800216e:	e013      	b.n	8002198 <UART_SetConfig+0xe4>
 8002170:	231b      	movs	r3, #27
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e021      	b.n	80021be <UART_SetConfig+0x10a>
 800217a:	231b      	movs	r3, #27
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	2202      	movs	r2, #2
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e01c      	b.n	80021be <UART_SetConfig+0x10a>
 8002184:	231b      	movs	r3, #27
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	2204      	movs	r2, #4
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	e017      	b.n	80021be <UART_SetConfig+0x10a>
 800218e:	231b      	movs	r3, #27
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	2208      	movs	r2, #8
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	e012      	b.n	80021be <UART_SetConfig+0x10a>
 8002198:	231b      	movs	r3, #27
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	2210      	movs	r2, #16
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e00d      	b.n	80021be <UART_SetConfig+0x10a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a75      	ldr	r2, [pc, #468]	; (800237c <UART_SetConfig+0x2c8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d104      	bne.n	80021b6 <UART_SetConfig+0x102>
 80021ac:	231b      	movs	r3, #27
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	e003      	b.n	80021be <UART_SetConfig+0x10a>
 80021b6:	231b      	movs	r3, #27
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	2210      	movs	r2, #16
 80021bc:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d000      	beq.n	80021cc <UART_SetConfig+0x118>
 80021ca:	e066      	b.n	800229a <UART_SetConfig+0x1e6>
  {
    switch (clocksource)
 80021cc:	231b      	movs	r3, #27
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d015      	beq.n	8002202 <UART_SetConfig+0x14e>
 80021d6:	dc18      	bgt.n	800220a <UART_SetConfig+0x156>
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d00d      	beq.n	80021f8 <UART_SetConfig+0x144>
 80021dc:	dc15      	bgt.n	800220a <UART_SetConfig+0x156>
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <UART_SetConfig+0x134>
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d005      	beq.n	80021f2 <UART_SetConfig+0x13e>
 80021e6:	e010      	b.n	800220a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021e8:	f7ff fd26 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 80021ec:	0003      	movs	r3, r0
 80021ee:	617b      	str	r3, [r7, #20]
        break;
 80021f0:	e012      	b.n	8002218 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021f2:	4b63      	ldr	r3, [pc, #396]	; (8002380 <UART_SetConfig+0x2cc>)
 80021f4:	617b      	str	r3, [r7, #20]
        break;
 80021f6:	e00f      	b.n	8002218 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021f8:	f7ff fc92 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 80021fc:	0003      	movs	r3, r0
 80021fe:	617b      	str	r3, [r7, #20]
        break;
 8002200:	e00a      	b.n	8002218 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	617b      	str	r3, [r7, #20]
        break;
 8002208:	e006      	b.n	8002218 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800220e:	231a      	movs	r3, #26
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
        break;
 8002216:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d100      	bne.n	8002220 <UART_SetConfig+0x16c>
 800221e:	e08e      	b.n	800233e <UART_SetConfig+0x28a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002224:	4b57      	ldr	r3, [pc, #348]	; (8002384 <UART_SetConfig+0x2d0>)
 8002226:	0052      	lsls	r2, r2, #1
 8002228:	5ad3      	ldrh	r3, [r2, r3]
 800222a:	0019      	movs	r1, r3
 800222c:	6978      	ldr	r0, [r7, #20]
 800222e:	f7fd ff79 	bl	8000124 <__udivsi3>
 8002232:	0003      	movs	r3, r0
 8002234:	005a      	lsls	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	18d2      	adds	r2, r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	0019      	movs	r1, r3
 8002244:	0010      	movs	r0, r2
 8002246:	f7fd ff6d 	bl	8000124 <__udivsi3>
 800224a:	0003      	movs	r3, r0
 800224c:	b29b      	uxth	r3, r3
 800224e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	2b0f      	cmp	r3, #15
 8002254:	d91c      	bls.n	8002290 <UART_SetConfig+0x1dc>
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	025b      	lsls	r3, r3, #9
 800225c:	429a      	cmp	r2, r3
 800225e:	d217      	bcs.n	8002290 <UART_SetConfig+0x1dc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	b29a      	uxth	r2, r3
 8002264:	200e      	movs	r0, #14
 8002266:	183b      	adds	r3, r7, r0
 8002268:	210f      	movs	r1, #15
 800226a:	438a      	bics	r2, r1
 800226c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	b29b      	uxth	r3, r3
 8002274:	2207      	movs	r2, #7
 8002276:	4013      	ands	r3, r2
 8002278:	b299      	uxth	r1, r3
 800227a:	183b      	adds	r3, r7, r0
 800227c:	183a      	adds	r2, r7, r0
 800227e:	8812      	ldrh	r2, [r2, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	183a      	adds	r2, r7, r0
 800228a:	8812      	ldrh	r2, [r2, #0]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	e056      	b.n	800233e <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
 8002290:	231a      	movs	r3, #26
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e051      	b.n	800233e <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800229a:	231b      	movs	r3, #27
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d015      	beq.n	80022d0 <UART_SetConfig+0x21c>
 80022a4:	dc18      	bgt.n	80022d8 <UART_SetConfig+0x224>
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d00d      	beq.n	80022c6 <UART_SetConfig+0x212>
 80022aa:	dc15      	bgt.n	80022d8 <UART_SetConfig+0x224>
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <UART_SetConfig+0x202>
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d005      	beq.n	80022c0 <UART_SetConfig+0x20c>
 80022b4:	e010      	b.n	80022d8 <UART_SetConfig+0x224>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022b6:	f7ff fcbf 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 80022ba:	0003      	movs	r3, r0
 80022bc:	617b      	str	r3, [r7, #20]
        break;
 80022be:	e012      	b.n	80022e6 <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022c0:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <UART_SetConfig+0x2cc>)
 80022c2:	617b      	str	r3, [r7, #20]
        break;
 80022c4:	e00f      	b.n	80022e6 <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022c6:	f7ff fc2b 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 80022ca:	0003      	movs	r3, r0
 80022cc:	617b      	str	r3, [r7, #20]
        break;
 80022ce:	e00a      	b.n	80022e6 <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	617b      	str	r3, [r7, #20]
        break;
 80022d6:	e006      	b.n	80022e6 <UART_SetConfig+0x232>
      default:
        pclk = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80022dc:	231a      	movs	r3, #26
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
        break;
 80022e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d028      	beq.n	800233e <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <UART_SetConfig+0x2d0>)
 80022f2:	0052      	lsls	r2, r2, #1
 80022f4:	5ad3      	ldrh	r3, [r2, r3]
 80022f6:	0019      	movs	r1, r3
 80022f8:	6978      	ldr	r0, [r7, #20]
 80022fa:	f7fd ff13 	bl	8000124 <__udivsi3>
 80022fe:	0003      	movs	r3, r0
 8002300:	001a      	movs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	18d2      	adds	r2, r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0019      	movs	r1, r3
 8002310:	0010      	movs	r0, r2
 8002312:	f7fd ff07 	bl	8000124 <__udivsi3>
 8002316:	0003      	movs	r3, r0
 8002318:	b29b      	uxth	r3, r3
 800231a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2b0f      	cmp	r3, #15
 8002320:	d909      	bls.n	8002336 <UART_SetConfig+0x282>
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	025b      	lsls	r3, r3, #9
 8002328:	429a      	cmp	r2, r3
 800232a:	d204      	bcs.n	8002336 <UART_SetConfig+0x282>
      {
        huart->Instance->BRR = usartdiv;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	60da      	str	r2, [r3, #12]
 8002334:	e003      	b.n	800233e <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
 8002336:	231a      	movs	r3, #26
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	226a      	movs	r2, #106	; 0x6a
 8002342:	2101      	movs	r1, #1
 8002344:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2268      	movs	r2, #104	; 0x68
 800234a:	2101      	movs	r1, #1
 800234c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800235a:	231a      	movs	r3, #26
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781b      	ldrb	r3, [r3, #0]
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b008      	add	sp, #32
 8002366:	bd80      	pop	{r7, pc}
 8002368:	cfff69f3 	.word	0xcfff69f3
 800236c:	ffffcfff 	.word	0xffffcfff
 8002370:	11fff4ff 	.word	0x11fff4ff
 8002374:	40013800 	.word	0x40013800
 8002378:	40021000 	.word	0x40021000
 800237c:	40004400 	.word	0x40004400
 8002380:	00f42400 	.word	0x00f42400
 8002384:	08003310 	.word	0x08003310

08002388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	2201      	movs	r2, #1
 8002396:	4013      	ands	r3, r2
 8002398:	d00b      	beq.n	80023b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4a4a      	ldr	r2, [pc, #296]	; (80024cc <UART_AdvFeatureConfig+0x144>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	2202      	movs	r2, #2
 80023b8:	4013      	ands	r3, r2
 80023ba:	d00b      	beq.n	80023d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4a43      	ldr	r2, [pc, #268]	; (80024d0 <UART_AdvFeatureConfig+0x148>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	2204      	movs	r2, #4
 80023da:	4013      	ands	r3, r2
 80023dc:	d00b      	beq.n	80023f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a3b      	ldr	r2, [pc, #236]	; (80024d4 <UART_AdvFeatureConfig+0x14c>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	0019      	movs	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	2208      	movs	r2, #8
 80023fc:	4013      	ands	r3, r2
 80023fe:	d00b      	beq.n	8002418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a34      	ldr	r2, [pc, #208]	; (80024d8 <UART_AdvFeatureConfig+0x150>)
 8002408:	4013      	ands	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	2210      	movs	r2, #16
 800241e:	4013      	ands	r3, r2
 8002420:	d00b      	beq.n	800243a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4a2c      	ldr	r2, [pc, #176]	; (80024dc <UART_AdvFeatureConfig+0x154>)
 800242a:	4013      	ands	r3, r2
 800242c:	0019      	movs	r1, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	2220      	movs	r2, #32
 8002440:	4013      	ands	r3, r2
 8002442:	d00b      	beq.n	800245c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	4a25      	ldr	r2, [pc, #148]	; (80024e0 <UART_AdvFeatureConfig+0x158>)
 800244c:	4013      	ands	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	2240      	movs	r2, #64	; 0x40
 8002462:	4013      	ands	r3, r2
 8002464:	d01d      	beq.n	80024a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <UART_AdvFeatureConfig+0x15c>)
 800246e:	4013      	ands	r3, r2
 8002470:	0019      	movs	r1, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	035b      	lsls	r3, r3, #13
 8002486:	429a      	cmp	r2, r3
 8002488:	d10b      	bne.n	80024a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <UART_AdvFeatureConfig+0x160>)
 8002492:	4013      	ands	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	2280      	movs	r2, #128	; 0x80
 80024a8:	4013      	ands	r3, r2
 80024aa:	d00b      	beq.n	80024c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <UART_AdvFeatureConfig+0x164>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
  }
}
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	fffdffff 	.word	0xfffdffff
 80024d0:	fffeffff 	.word	0xfffeffff
 80024d4:	fffbffff 	.word	0xfffbffff
 80024d8:	ffff7fff 	.word	0xffff7fff
 80024dc:	ffffefff 	.word	0xffffefff
 80024e0:	ffffdfff 	.word	0xffffdfff
 80024e4:	ffefffff 	.word	0xffefffff
 80024e8:	ff9fffff 	.word	0xff9fffff
 80024ec:	fff7ffff 	.word	0xfff7ffff

080024f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	228c      	movs	r2, #140	; 0x8c
 80024fc:	2100      	movs	r1, #0
 80024fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002500:	f7fe fbf6 	bl	8000cf0 <HAL_GetTick>
 8002504:	0003      	movs	r3, r0
 8002506:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2208      	movs	r2, #8
 8002510:	4013      	ands	r3, r2
 8002512:	2b08      	cmp	r3, #8
 8002514:	d10c      	bne.n	8002530 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	0391      	lsls	r1, r2, #14
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4a18      	ldr	r2, [pc, #96]	; (8002580 <UART_CheckIdleState+0x90>)
 8002520:	9200      	str	r2, [sp, #0]
 8002522:	2200      	movs	r2, #0
 8002524:	f000 f82e 	bl	8002584 <UART_WaitOnFlagUntilTimeout>
 8002528:	1e03      	subs	r3, r0, #0
 800252a:	d001      	beq.n	8002530 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e023      	b.n	8002578 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2204      	movs	r2, #4
 8002538:	4013      	ands	r3, r2
 800253a:	2b04      	cmp	r3, #4
 800253c:	d10c      	bne.n	8002558 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	03d1      	lsls	r1, r2, #15
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <UART_CheckIdleState+0x90>)
 8002548:	9200      	str	r2, [sp, #0]
 800254a:	2200      	movs	r2, #0
 800254c:	f000 f81a 	bl	8002584 <UART_WaitOnFlagUntilTimeout>
 8002550:	1e03      	subs	r3, r0, #0
 8002552:	d001      	beq.n	8002558 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e00f      	b.n	8002578 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2284      	movs	r2, #132	; 0x84
 800255c:	2120      	movs	r1, #32
 800255e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2288      	movs	r2, #136	; 0x88
 8002564:	2120      	movs	r1, #32
 8002566:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	2100      	movs	r1, #0
 8002574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b004      	add	sp, #16
 800257e:	bd80      	pop	{r7, pc}
 8002580:	01ffffff 	.word	0x01ffffff

08002584 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b094      	sub	sp, #80	; 0x50
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	1dfb      	adds	r3, r7, #7
 8002592:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002594:	e0a7      	b.n	80026e6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002598:	3301      	adds	r3, #1
 800259a:	d100      	bne.n	800259e <UART_WaitOnFlagUntilTimeout+0x1a>
 800259c:	e0a3      	b.n	80026e6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259e:	f7fe fba7 	bl	8000cf0 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80025ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d13f      	bne.n	8002634 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b4:	f3ef 8310 	mrs	r3, PRIMASK
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80025bc:	647b      	str	r3, [r7, #68]	; 0x44
 80025be:	2301      	movs	r3, #1
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	f383 8810 	msr	PRIMASK, r3
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	494e      	ldr	r1, [pc, #312]	; (8002710 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	f383 8810 	msr	PRIMASK, r3
}
 80025e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e6:	f3ef 8310 	mrs	r3, PRIMASK
 80025ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80025ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ee:	643b      	str	r3, [r7, #64]	; 0x40
 80025f0:	2301      	movs	r3, #1
 80025f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f6:	f383 8810 	msr	PRIMASK, r3
}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2101      	movs	r1, #1
 8002608:	438a      	bics	r2, r1
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002612:	f383 8810 	msr	PRIMASK, r3
}
 8002616:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2284      	movs	r2, #132	; 0x84
 800261c:	2120      	movs	r1, #32
 800261e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2288      	movs	r2, #136	; 0x88
 8002624:	2120      	movs	r1, #32
 8002626:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2280      	movs	r2, #128	; 0x80
 800262c:	2100      	movs	r1, #0
 800262e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e069      	b.n	8002708 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2204      	movs	r2, #4
 800263c:	4013      	ands	r3, r2
 800263e:	d052      	beq.n	80026e6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	401a      	ands	r2, r3
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	429a      	cmp	r2, r3
 8002652:	d148      	bne.n	80026e6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800265e:	f3ef 8310 	mrs	r3, PRIMASK
 8002662:	613b      	str	r3, [r7, #16]
  return(result);
 8002664:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002668:	2301      	movs	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f383 8810 	msr	PRIMASK, r3
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4924      	ldr	r1, [pc, #144]	; (8002710 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002680:	400a      	ands	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002686:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f383 8810 	msr	PRIMASK, r3
}
 800268e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002690:	f3ef 8310 	mrs	r3, PRIMASK
 8002694:	61fb      	str	r3, [r7, #28]
  return(result);
 8002696:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002698:	64bb      	str	r3, [r7, #72]	; 0x48
 800269a:	2301      	movs	r3, #1
 800269c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f383 8810 	msr	PRIMASK, r3
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	438a      	bics	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	f383 8810 	msr	PRIMASK, r3
}
 80026c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2284      	movs	r2, #132	; 0x84
 80026c6:	2120      	movs	r1, #32
 80026c8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2288      	movs	r2, #136	; 0x88
 80026ce:	2120      	movs	r1, #32
 80026d0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	228c      	movs	r2, #140	; 0x8c
 80026d6:	2120      	movs	r1, #32
 80026d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2280      	movs	r2, #128	; 0x80
 80026de:	2100      	movs	r1, #0
 80026e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e010      	b.n	8002708 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	4013      	ands	r3, r2
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	425a      	negs	r2, r3
 80026f6:	4153      	adcs	r3, r2
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	001a      	movs	r2, r3
 80026fc:	1dfb      	adds	r3, r7, #7
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d100      	bne.n	8002706 <UART_WaitOnFlagUntilTimeout+0x182>
 8002704:	e747      	b.n	8002596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	b014      	add	sp, #80	; 0x50
 800270e:	bd80      	pop	{r7, pc}
 8002710:	fffffe5f 	.word	0xfffffe5f

08002714 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	5c9b      	ldrb	r3, [r3, r2]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_UARTEx_DisableFifoMode+0x16>
 8002726:	2302      	movs	r3, #2
 8002728:	e027      	b.n	800277a <HAL_UARTEx_DisableFifoMode+0x66>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2284      	movs	r2, #132	; 0x84
 8002736:	2124      	movs	r1, #36	; 0x24
 8002738:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	438a      	bics	r2, r1
 8002750:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002756:	4013      	ands	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2284      	movs	r2, #132	; 0x84
 800276c:	2120      	movs	r1, #32
 800276e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b004      	add	sp, #16
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	dfffffff 	.word	0xdfffffff

08002788 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	5c9b      	ldrb	r3, [r3, r2]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800279c:	2302      	movs	r3, #2
 800279e:	e02e      	b.n	80027fe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	2101      	movs	r1, #1
 80027a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2284      	movs	r2, #132	; 0x84
 80027ac:	2124      	movs	r1, #36	; 0x24
 80027ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2101      	movs	r1, #1
 80027c4:	438a      	bics	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	08d9      	lsrs	r1, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 f854 	bl	800288c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2284      	movs	r2, #132	; 0x84
 80027f0:	2120      	movs	r1, #32
 80027f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	2100      	movs	r1, #0
 80027fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b004      	add	sp, #16
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2280      	movs	r2, #128	; 0x80
 8002816:	5c9b      	ldrb	r3, [r3, r2]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800281c:	2302      	movs	r3, #2
 800281e:	e02f      	b.n	8002880 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	2101      	movs	r1, #1
 8002826:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2284      	movs	r2, #132	; 0x84
 800282c:	2124      	movs	r1, #36	; 0x24
 800282e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2101      	movs	r1, #1
 8002844:	438a      	bics	r2, r1
 8002846:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002850:	4013      	ands	r3, r2
 8002852:	0019      	movs	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0018      	movs	r0, r3
 8002862:	f000 f813 	bl	800288c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2284      	movs	r2, #132	; 0x84
 8002872:	2120      	movs	r1, #32
 8002874:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b004      	add	sp, #16
 8002886:	bd80      	pop	{r7, pc}
 8002888:	f1ffffff 	.word	0xf1ffffff

0800288c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800288c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002898:	2b00      	cmp	r3, #0
 800289a:	d108      	bne.n	80028ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	226a      	movs	r2, #106	; 0x6a
 80028a0:	2101      	movs	r1, #1
 80028a2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2268      	movs	r2, #104	; 0x68
 80028a8:	2101      	movs	r1, #1
 80028aa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80028ac:	e043      	b.n	8002936 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80028ae:	260f      	movs	r6, #15
 80028b0:	19bb      	adds	r3, r7, r6
 80028b2:	2208      	movs	r2, #8
 80028b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80028b6:	200e      	movs	r0, #14
 80028b8:	183b      	adds	r3, r7, r0
 80028ba:	2208      	movs	r2, #8
 80028bc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	0e5b      	lsrs	r3, r3, #25
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	240d      	movs	r4, #13
 80028ca:	193b      	adds	r3, r7, r4
 80028cc:	2107      	movs	r1, #7
 80028ce:	400a      	ands	r2, r1
 80028d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	0f5b      	lsrs	r3, r3, #29
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	250c      	movs	r5, #12
 80028de:	197b      	adds	r3, r7, r5
 80028e0:	2107      	movs	r1, #7
 80028e2:	400a      	ands	r2, r1
 80028e4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80028e6:	183b      	adds	r3, r7, r0
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	197a      	adds	r2, r7, r5
 80028ec:	7812      	ldrb	r2, [r2, #0]
 80028ee:	4914      	ldr	r1, [pc, #80]	; (8002940 <UARTEx_SetNbDataToProcess+0xb4>)
 80028f0:	5c8a      	ldrb	r2, [r1, r2]
 80028f2:	435a      	muls	r2, r3
 80028f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80028f6:	197b      	adds	r3, r7, r5
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <UARTEx_SetNbDataToProcess+0xb8>)
 80028fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80028fe:	0019      	movs	r1, r3
 8002900:	f7fd fc9a 	bl	8000238 <__divsi3>
 8002904:	0003      	movs	r3, r0
 8002906:	b299      	uxth	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	226a      	movs	r2, #106	; 0x6a
 800290c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800290e:	19bb      	adds	r3, r7, r6
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	193a      	adds	r2, r7, r4
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	490a      	ldr	r1, [pc, #40]	; (8002940 <UARTEx_SetNbDataToProcess+0xb4>)
 8002918:	5c8a      	ldrb	r2, [r1, r2]
 800291a:	435a      	muls	r2, r3
 800291c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800291e:	193b      	adds	r3, r7, r4
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	4a08      	ldr	r2, [pc, #32]	; (8002944 <UARTEx_SetNbDataToProcess+0xb8>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002926:	0019      	movs	r1, r3
 8002928:	f7fd fc86 	bl	8000238 <__divsi3>
 800292c:	0003      	movs	r3, r0
 800292e:	b299      	uxth	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2268      	movs	r2, #104	; 0x68
 8002934:	5299      	strh	r1, [r3, r2]
}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b005      	add	sp, #20
 800293c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	08003328 	.word	0x08003328
 8002944:	08003330 	.word	0x08003330

08002948 <__errno>:
 8002948:	4b01      	ldr	r3, [pc, #4]	; (8002950 <__errno+0x8>)
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	4770      	bx	lr
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	20000010 	.word	0x20000010

08002954 <__libc_init_array>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	2600      	movs	r6, #0
 8002958:	4d0c      	ldr	r5, [pc, #48]	; (800298c <__libc_init_array+0x38>)
 800295a:	4c0d      	ldr	r4, [pc, #52]	; (8002990 <__libc_init_array+0x3c>)
 800295c:	1b64      	subs	r4, r4, r5
 800295e:	10a4      	asrs	r4, r4, #2
 8002960:	42a6      	cmp	r6, r4
 8002962:	d109      	bne.n	8002978 <__libc_init_array+0x24>
 8002964:	2600      	movs	r6, #0
 8002966:	f000 fc5b 	bl	8003220 <_init>
 800296a:	4d0a      	ldr	r5, [pc, #40]	; (8002994 <__libc_init_array+0x40>)
 800296c:	4c0a      	ldr	r4, [pc, #40]	; (8002998 <__libc_init_array+0x44>)
 800296e:	1b64      	subs	r4, r4, r5
 8002970:	10a4      	asrs	r4, r4, #2
 8002972:	42a6      	cmp	r6, r4
 8002974:	d105      	bne.n	8002982 <__libc_init_array+0x2e>
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	00b3      	lsls	r3, r6, #2
 800297a:	58eb      	ldr	r3, [r5, r3]
 800297c:	4798      	blx	r3
 800297e:	3601      	adds	r6, #1
 8002980:	e7ee      	b.n	8002960 <__libc_init_array+0xc>
 8002982:	00b3      	lsls	r3, r6, #2
 8002984:	58eb      	ldr	r3, [r5, r3]
 8002986:	4798      	blx	r3
 8002988:	3601      	adds	r6, #1
 800298a:	e7f2      	b.n	8002972 <__libc_init_array+0x1e>
 800298c:	0800336c 	.word	0x0800336c
 8002990:	0800336c 	.word	0x0800336c
 8002994:	0800336c 	.word	0x0800336c
 8002998:	08003370 	.word	0x08003370

0800299c <memset>:
 800299c:	0003      	movs	r3, r0
 800299e:	1882      	adds	r2, r0, r2
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d100      	bne.n	80029a6 <memset+0xa>
 80029a4:	4770      	bx	lr
 80029a6:	7019      	strb	r1, [r3, #0]
 80029a8:	3301      	adds	r3, #1
 80029aa:	e7f9      	b.n	80029a0 <memset+0x4>

080029ac <sniprintf>:
 80029ac:	b40c      	push	{r2, r3}
 80029ae:	b530      	push	{r4, r5, lr}
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <sniprintf+0x64>)
 80029b2:	000c      	movs	r4, r1
 80029b4:	681d      	ldr	r5, [r3, #0]
 80029b6:	b09d      	sub	sp, #116	; 0x74
 80029b8:	2900      	cmp	r1, #0
 80029ba:	da08      	bge.n	80029ce <sniprintf+0x22>
 80029bc:	238b      	movs	r3, #139	; 0x8b
 80029be:	2001      	movs	r0, #1
 80029c0:	602b      	str	r3, [r5, #0]
 80029c2:	4240      	negs	r0, r0
 80029c4:	b01d      	add	sp, #116	; 0x74
 80029c6:	bc30      	pop	{r4, r5}
 80029c8:	bc08      	pop	{r3}
 80029ca:	b002      	add	sp, #8
 80029cc:	4718      	bx	r3
 80029ce:	2382      	movs	r3, #130	; 0x82
 80029d0:	466a      	mov	r2, sp
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	8293      	strh	r3, [r2, #20]
 80029d6:	2300      	movs	r3, #0
 80029d8:	9002      	str	r0, [sp, #8]
 80029da:	9006      	str	r0, [sp, #24]
 80029dc:	4299      	cmp	r1, r3
 80029de:	d000      	beq.n	80029e2 <sniprintf+0x36>
 80029e0:	1e4b      	subs	r3, r1, #1
 80029e2:	9304      	str	r3, [sp, #16]
 80029e4:	9307      	str	r3, [sp, #28]
 80029e6:	2301      	movs	r3, #1
 80029e8:	466a      	mov	r2, sp
 80029ea:	425b      	negs	r3, r3
 80029ec:	82d3      	strh	r3, [r2, #22]
 80029ee:	0028      	movs	r0, r5
 80029f0:	ab21      	add	r3, sp, #132	; 0x84
 80029f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80029f4:	a902      	add	r1, sp, #8
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	f000 f86e 	bl	8002ad8 <_svfiprintf_r>
 80029fc:	1c43      	adds	r3, r0, #1
 80029fe:	da01      	bge.n	8002a04 <sniprintf+0x58>
 8002a00:	238b      	movs	r3, #139	; 0x8b
 8002a02:	602b      	str	r3, [r5, #0]
 8002a04:	2c00      	cmp	r4, #0
 8002a06:	d0dd      	beq.n	80029c4 <sniprintf+0x18>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9a02      	ldr	r2, [sp, #8]
 8002a0c:	7013      	strb	r3, [r2, #0]
 8002a0e:	e7d9      	b.n	80029c4 <sniprintf+0x18>
 8002a10:	20000010 	.word	0x20000010

08002a14 <__ssputs_r>:
 8002a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a16:	688e      	ldr	r6, [r1, #8]
 8002a18:	b085      	sub	sp, #20
 8002a1a:	0007      	movs	r7, r0
 8002a1c:	000c      	movs	r4, r1
 8002a1e:	9203      	str	r2, [sp, #12]
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	429e      	cmp	r6, r3
 8002a24:	d83c      	bhi.n	8002aa0 <__ssputs_r+0x8c>
 8002a26:	2390      	movs	r3, #144	; 0x90
 8002a28:	898a      	ldrh	r2, [r1, #12]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	421a      	tst	r2, r3
 8002a2e:	d034      	beq.n	8002a9a <__ssputs_r+0x86>
 8002a30:	2503      	movs	r5, #3
 8002a32:	6909      	ldr	r1, [r1, #16]
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	1a5b      	subs	r3, r3, r1
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	6963      	ldr	r3, [r4, #20]
 8002a3c:	9802      	ldr	r0, [sp, #8]
 8002a3e:	435d      	muls	r5, r3
 8002a40:	0feb      	lsrs	r3, r5, #31
 8002a42:	195d      	adds	r5, r3, r5
 8002a44:	9b01      	ldr	r3, [sp, #4]
 8002a46:	106d      	asrs	r5, r5, #1
 8002a48:	3301      	adds	r3, #1
 8002a4a:	181b      	adds	r3, r3, r0
 8002a4c:	42ab      	cmp	r3, r5
 8002a4e:	d900      	bls.n	8002a52 <__ssputs_r+0x3e>
 8002a50:	001d      	movs	r5, r3
 8002a52:	0553      	lsls	r3, r2, #21
 8002a54:	d532      	bpl.n	8002abc <__ssputs_r+0xa8>
 8002a56:	0029      	movs	r1, r5
 8002a58:	0038      	movs	r0, r7
 8002a5a:	f000 fb31 	bl	80030c0 <_malloc_r>
 8002a5e:	1e06      	subs	r6, r0, #0
 8002a60:	d109      	bne.n	8002a76 <__ssputs_r+0x62>
 8002a62:	230c      	movs	r3, #12
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	2340      	movs	r3, #64	; 0x40
 8002a68:	2001      	movs	r0, #1
 8002a6a:	89a2      	ldrh	r2, [r4, #12]
 8002a6c:	4240      	negs	r0, r0
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	81a3      	strh	r3, [r4, #12]
 8002a72:	b005      	add	sp, #20
 8002a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a76:	9a02      	ldr	r2, [sp, #8]
 8002a78:	6921      	ldr	r1, [r4, #16]
 8002a7a:	f000 faba 	bl	8002ff2 <memcpy>
 8002a7e:	89a3      	ldrh	r3, [r4, #12]
 8002a80:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <__ssputs_r+0xc0>)
 8002a82:	401a      	ands	r2, r3
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	4313      	orrs	r3, r2
 8002a88:	81a3      	strh	r3, [r4, #12]
 8002a8a:	9b02      	ldr	r3, [sp, #8]
 8002a8c:	6126      	str	r6, [r4, #16]
 8002a8e:	18f6      	adds	r6, r6, r3
 8002a90:	6026      	str	r6, [r4, #0]
 8002a92:	6165      	str	r5, [r4, #20]
 8002a94:	9e01      	ldr	r6, [sp, #4]
 8002a96:	1aed      	subs	r5, r5, r3
 8002a98:	60a5      	str	r5, [r4, #8]
 8002a9a:	9b01      	ldr	r3, [sp, #4]
 8002a9c:	429e      	cmp	r6, r3
 8002a9e:	d900      	bls.n	8002aa2 <__ssputs_r+0x8e>
 8002aa0:	9e01      	ldr	r6, [sp, #4]
 8002aa2:	0032      	movs	r2, r6
 8002aa4:	9903      	ldr	r1, [sp, #12]
 8002aa6:	6820      	ldr	r0, [r4, #0]
 8002aa8:	f000 faac 	bl	8003004 <memmove>
 8002aac:	68a3      	ldr	r3, [r4, #8]
 8002aae:	2000      	movs	r0, #0
 8002ab0:	1b9b      	subs	r3, r3, r6
 8002ab2:	60a3      	str	r3, [r4, #8]
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	199e      	adds	r6, r3, r6
 8002ab8:	6026      	str	r6, [r4, #0]
 8002aba:	e7da      	b.n	8002a72 <__ssputs_r+0x5e>
 8002abc:	002a      	movs	r2, r5
 8002abe:	0038      	movs	r0, r7
 8002ac0:	f000 fb5c 	bl	800317c <_realloc_r>
 8002ac4:	1e06      	subs	r6, r0, #0
 8002ac6:	d1e0      	bne.n	8002a8a <__ssputs_r+0x76>
 8002ac8:	0038      	movs	r0, r7
 8002aca:	6921      	ldr	r1, [r4, #16]
 8002acc:	f000 faae 	bl	800302c <_free_r>
 8002ad0:	e7c7      	b.n	8002a62 <__ssputs_r+0x4e>
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	fffffb7f 	.word	0xfffffb7f

08002ad8 <_svfiprintf_r>:
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	b0a1      	sub	sp, #132	; 0x84
 8002adc:	9003      	str	r0, [sp, #12]
 8002ade:	001d      	movs	r5, r3
 8002ae0:	898b      	ldrh	r3, [r1, #12]
 8002ae2:	000f      	movs	r7, r1
 8002ae4:	0016      	movs	r6, r2
 8002ae6:	061b      	lsls	r3, r3, #24
 8002ae8:	d511      	bpl.n	8002b0e <_svfiprintf_r+0x36>
 8002aea:	690b      	ldr	r3, [r1, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10e      	bne.n	8002b0e <_svfiprintf_r+0x36>
 8002af0:	2140      	movs	r1, #64	; 0x40
 8002af2:	f000 fae5 	bl	80030c0 <_malloc_r>
 8002af6:	6038      	str	r0, [r7, #0]
 8002af8:	6138      	str	r0, [r7, #16]
 8002afa:	2800      	cmp	r0, #0
 8002afc:	d105      	bne.n	8002b0a <_svfiprintf_r+0x32>
 8002afe:	230c      	movs	r3, #12
 8002b00:	9a03      	ldr	r2, [sp, #12]
 8002b02:	3801      	subs	r0, #1
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	b021      	add	sp, #132	; 0x84
 8002b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b0a:	2340      	movs	r3, #64	; 0x40
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	ac08      	add	r4, sp, #32
 8002b12:	6163      	str	r3, [r4, #20]
 8002b14:	3320      	adds	r3, #32
 8002b16:	7663      	strb	r3, [r4, #25]
 8002b18:	3310      	adds	r3, #16
 8002b1a:	76a3      	strb	r3, [r4, #26]
 8002b1c:	9507      	str	r5, [sp, #28]
 8002b1e:	0035      	movs	r5, r6
 8002b20:	782b      	ldrb	r3, [r5, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <_svfiprintf_r+0x52>
 8002b26:	2b25      	cmp	r3, #37	; 0x25
 8002b28:	d147      	bne.n	8002bba <_svfiprintf_r+0xe2>
 8002b2a:	1bab      	subs	r3, r5, r6
 8002b2c:	9305      	str	r3, [sp, #20]
 8002b2e:	42b5      	cmp	r5, r6
 8002b30:	d00c      	beq.n	8002b4c <_svfiprintf_r+0x74>
 8002b32:	0032      	movs	r2, r6
 8002b34:	0039      	movs	r1, r7
 8002b36:	9803      	ldr	r0, [sp, #12]
 8002b38:	f7ff ff6c 	bl	8002a14 <__ssputs_r>
 8002b3c:	1c43      	adds	r3, r0, #1
 8002b3e:	d100      	bne.n	8002b42 <_svfiprintf_r+0x6a>
 8002b40:	e0ae      	b.n	8002ca0 <_svfiprintf_r+0x1c8>
 8002b42:	6962      	ldr	r2, [r4, #20]
 8002b44:	9b05      	ldr	r3, [sp, #20]
 8002b46:	4694      	mov	ip, r2
 8002b48:	4463      	add	r3, ip
 8002b4a:	6163      	str	r3, [r4, #20]
 8002b4c:	782b      	ldrb	r3, [r5, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d100      	bne.n	8002b54 <_svfiprintf_r+0x7c>
 8002b52:	e0a5      	b.n	8002ca0 <_svfiprintf_r+0x1c8>
 8002b54:	2201      	movs	r2, #1
 8002b56:	2300      	movs	r3, #0
 8002b58:	4252      	negs	r2, r2
 8002b5a:	6062      	str	r2, [r4, #4]
 8002b5c:	a904      	add	r1, sp, #16
 8002b5e:	3254      	adds	r2, #84	; 0x54
 8002b60:	1852      	adds	r2, r2, r1
 8002b62:	1c6e      	adds	r6, r5, #1
 8002b64:	6023      	str	r3, [r4, #0]
 8002b66:	60e3      	str	r3, [r4, #12]
 8002b68:	60a3      	str	r3, [r4, #8]
 8002b6a:	7013      	strb	r3, [r2, #0]
 8002b6c:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b6e:	2205      	movs	r2, #5
 8002b70:	7831      	ldrb	r1, [r6, #0]
 8002b72:	4854      	ldr	r0, [pc, #336]	; (8002cc4 <_svfiprintf_r+0x1ec>)
 8002b74:	f000 fa32 	bl	8002fdc <memchr>
 8002b78:	1c75      	adds	r5, r6, #1
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d11f      	bne.n	8002bbe <_svfiprintf_r+0xe6>
 8002b7e:	6822      	ldr	r2, [r4, #0]
 8002b80:	06d3      	lsls	r3, r2, #27
 8002b82:	d504      	bpl.n	8002b8e <_svfiprintf_r+0xb6>
 8002b84:	2353      	movs	r3, #83	; 0x53
 8002b86:	a904      	add	r1, sp, #16
 8002b88:	185b      	adds	r3, r3, r1
 8002b8a:	2120      	movs	r1, #32
 8002b8c:	7019      	strb	r1, [r3, #0]
 8002b8e:	0713      	lsls	r3, r2, #28
 8002b90:	d504      	bpl.n	8002b9c <_svfiprintf_r+0xc4>
 8002b92:	2353      	movs	r3, #83	; 0x53
 8002b94:	a904      	add	r1, sp, #16
 8002b96:	185b      	adds	r3, r3, r1
 8002b98:	212b      	movs	r1, #43	; 0x2b
 8002b9a:	7019      	strb	r1, [r3, #0]
 8002b9c:	7833      	ldrb	r3, [r6, #0]
 8002b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8002ba0:	d016      	beq.n	8002bd0 <_svfiprintf_r+0xf8>
 8002ba2:	0035      	movs	r5, r6
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	200a      	movs	r0, #10
 8002ba8:	68e3      	ldr	r3, [r4, #12]
 8002baa:	782a      	ldrb	r2, [r5, #0]
 8002bac:	1c6e      	adds	r6, r5, #1
 8002bae:	3a30      	subs	r2, #48	; 0x30
 8002bb0:	2a09      	cmp	r2, #9
 8002bb2:	d94e      	bls.n	8002c52 <_svfiprintf_r+0x17a>
 8002bb4:	2900      	cmp	r1, #0
 8002bb6:	d111      	bne.n	8002bdc <_svfiprintf_r+0x104>
 8002bb8:	e017      	b.n	8002bea <_svfiprintf_r+0x112>
 8002bba:	3501      	adds	r5, #1
 8002bbc:	e7b0      	b.n	8002b20 <_svfiprintf_r+0x48>
 8002bbe:	4b41      	ldr	r3, [pc, #260]	; (8002cc4 <_svfiprintf_r+0x1ec>)
 8002bc0:	6822      	ldr	r2, [r4, #0]
 8002bc2:	1ac0      	subs	r0, r0, r3
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	4083      	lsls	r3, r0
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	002e      	movs	r6, r5
 8002bcc:	6023      	str	r3, [r4, #0]
 8002bce:	e7ce      	b.n	8002b6e <_svfiprintf_r+0x96>
 8002bd0:	9b07      	ldr	r3, [sp, #28]
 8002bd2:	1d19      	adds	r1, r3, #4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	9107      	str	r1, [sp, #28]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	db01      	blt.n	8002be0 <_svfiprintf_r+0x108>
 8002bdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bde:	e004      	b.n	8002bea <_svfiprintf_r+0x112>
 8002be0:	425b      	negs	r3, r3
 8002be2:	60e3      	str	r3, [r4, #12]
 8002be4:	2302      	movs	r3, #2
 8002be6:	4313      	orrs	r3, r2
 8002be8:	6023      	str	r3, [r4, #0]
 8002bea:	782b      	ldrb	r3, [r5, #0]
 8002bec:	2b2e      	cmp	r3, #46	; 0x2e
 8002bee:	d10a      	bne.n	8002c06 <_svfiprintf_r+0x12e>
 8002bf0:	786b      	ldrb	r3, [r5, #1]
 8002bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8002bf4:	d135      	bne.n	8002c62 <_svfiprintf_r+0x18a>
 8002bf6:	9b07      	ldr	r3, [sp, #28]
 8002bf8:	3502      	adds	r5, #2
 8002bfa:	1d1a      	adds	r2, r3, #4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	9207      	str	r2, [sp, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	db2b      	blt.n	8002c5c <_svfiprintf_r+0x184>
 8002c04:	9309      	str	r3, [sp, #36]	; 0x24
 8002c06:	4e30      	ldr	r6, [pc, #192]	; (8002cc8 <_svfiprintf_r+0x1f0>)
 8002c08:	2203      	movs	r2, #3
 8002c0a:	0030      	movs	r0, r6
 8002c0c:	7829      	ldrb	r1, [r5, #0]
 8002c0e:	f000 f9e5 	bl	8002fdc <memchr>
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d006      	beq.n	8002c24 <_svfiprintf_r+0x14c>
 8002c16:	2340      	movs	r3, #64	; 0x40
 8002c18:	1b80      	subs	r0, r0, r6
 8002c1a:	4083      	lsls	r3, r0
 8002c1c:	6822      	ldr	r2, [r4, #0]
 8002c1e:	3501      	adds	r5, #1
 8002c20:	4313      	orrs	r3, r2
 8002c22:	6023      	str	r3, [r4, #0]
 8002c24:	7829      	ldrb	r1, [r5, #0]
 8002c26:	2206      	movs	r2, #6
 8002c28:	4828      	ldr	r0, [pc, #160]	; (8002ccc <_svfiprintf_r+0x1f4>)
 8002c2a:	1c6e      	adds	r6, r5, #1
 8002c2c:	7621      	strb	r1, [r4, #24]
 8002c2e:	f000 f9d5 	bl	8002fdc <memchr>
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d03c      	beq.n	8002cb0 <_svfiprintf_r+0x1d8>
 8002c36:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <_svfiprintf_r+0x1f8>)
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d125      	bne.n	8002c88 <_svfiprintf_r+0x1b0>
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	9b07      	ldr	r3, [sp, #28]
 8002c40:	3307      	adds	r3, #7
 8002c42:	4393      	bics	r3, r2
 8002c44:	3308      	adds	r3, #8
 8002c46:	9307      	str	r3, [sp, #28]
 8002c48:	6963      	ldr	r3, [r4, #20]
 8002c4a:	9a04      	ldr	r2, [sp, #16]
 8002c4c:	189b      	adds	r3, r3, r2
 8002c4e:	6163      	str	r3, [r4, #20]
 8002c50:	e765      	b.n	8002b1e <_svfiprintf_r+0x46>
 8002c52:	4343      	muls	r3, r0
 8002c54:	0035      	movs	r5, r6
 8002c56:	2101      	movs	r1, #1
 8002c58:	189b      	adds	r3, r3, r2
 8002c5a:	e7a6      	b.n	8002baa <_svfiprintf_r+0xd2>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	425b      	negs	r3, r3
 8002c60:	e7d0      	b.n	8002c04 <_svfiprintf_r+0x12c>
 8002c62:	2300      	movs	r3, #0
 8002c64:	200a      	movs	r0, #10
 8002c66:	001a      	movs	r2, r3
 8002c68:	3501      	adds	r5, #1
 8002c6a:	6063      	str	r3, [r4, #4]
 8002c6c:	7829      	ldrb	r1, [r5, #0]
 8002c6e:	1c6e      	adds	r6, r5, #1
 8002c70:	3930      	subs	r1, #48	; 0x30
 8002c72:	2909      	cmp	r1, #9
 8002c74:	d903      	bls.n	8002c7e <_svfiprintf_r+0x1a6>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0c5      	beq.n	8002c06 <_svfiprintf_r+0x12e>
 8002c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8002c7c:	e7c3      	b.n	8002c06 <_svfiprintf_r+0x12e>
 8002c7e:	4342      	muls	r2, r0
 8002c80:	0035      	movs	r5, r6
 8002c82:	2301      	movs	r3, #1
 8002c84:	1852      	adds	r2, r2, r1
 8002c86:	e7f1      	b.n	8002c6c <_svfiprintf_r+0x194>
 8002c88:	ab07      	add	r3, sp, #28
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	003a      	movs	r2, r7
 8002c8e:	0021      	movs	r1, r4
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <_svfiprintf_r+0x1fc>)
 8002c92:	9803      	ldr	r0, [sp, #12]
 8002c94:	e000      	b.n	8002c98 <_svfiprintf_r+0x1c0>
 8002c96:	bf00      	nop
 8002c98:	9004      	str	r0, [sp, #16]
 8002c9a:	9b04      	ldr	r3, [sp, #16]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	d1d3      	bne.n	8002c48 <_svfiprintf_r+0x170>
 8002ca0:	89bb      	ldrh	r3, [r7, #12]
 8002ca2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002ca4:	065b      	lsls	r3, r3, #25
 8002ca6:	d400      	bmi.n	8002caa <_svfiprintf_r+0x1d2>
 8002ca8:	e72d      	b.n	8002b06 <_svfiprintf_r+0x2e>
 8002caa:	2001      	movs	r0, #1
 8002cac:	4240      	negs	r0, r0
 8002cae:	e72a      	b.n	8002b06 <_svfiprintf_r+0x2e>
 8002cb0:	ab07      	add	r3, sp, #28
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	003a      	movs	r2, r7
 8002cb6:	0021      	movs	r1, r4
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <_svfiprintf_r+0x1fc>)
 8002cba:	9803      	ldr	r0, [sp, #12]
 8002cbc:	f000 f87c 	bl	8002db8 <_printf_i>
 8002cc0:	e7ea      	b.n	8002c98 <_svfiprintf_r+0x1c0>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	08003338 	.word	0x08003338
 8002cc8:	0800333e 	.word	0x0800333e
 8002ccc:	08003342 	.word	0x08003342
 8002cd0:	00000000 	.word	0x00000000
 8002cd4:	08002a15 	.word	0x08002a15

08002cd8 <_printf_common>:
 8002cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cda:	0015      	movs	r5, r2
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	688a      	ldr	r2, [r1, #8]
 8002ce0:	690b      	ldr	r3, [r1, #16]
 8002ce2:	000c      	movs	r4, r1
 8002ce4:	9000      	str	r0, [sp, #0]
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	da00      	bge.n	8002cec <_printf_common+0x14>
 8002cea:	0013      	movs	r3, r2
 8002cec:	0022      	movs	r2, r4
 8002cee:	602b      	str	r3, [r5, #0]
 8002cf0:	3243      	adds	r2, #67	; 0x43
 8002cf2:	7812      	ldrb	r2, [r2, #0]
 8002cf4:	2a00      	cmp	r2, #0
 8002cf6:	d001      	beq.n	8002cfc <_printf_common+0x24>
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	602b      	str	r3, [r5, #0]
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	069b      	lsls	r3, r3, #26
 8002d00:	d502      	bpl.n	8002d08 <_printf_common+0x30>
 8002d02:	682b      	ldr	r3, [r5, #0]
 8002d04:	3302      	adds	r3, #2
 8002d06:	602b      	str	r3, [r5, #0]
 8002d08:	6822      	ldr	r2, [r4, #0]
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	0017      	movs	r7, r2
 8002d0e:	401f      	ands	r7, r3
 8002d10:	421a      	tst	r2, r3
 8002d12:	d027      	beq.n	8002d64 <_printf_common+0x8c>
 8002d14:	0023      	movs	r3, r4
 8002d16:	3343      	adds	r3, #67	; 0x43
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	1e5a      	subs	r2, r3, #1
 8002d1c:	4193      	sbcs	r3, r2
 8002d1e:	6822      	ldr	r2, [r4, #0]
 8002d20:	0692      	lsls	r2, r2, #26
 8002d22:	d430      	bmi.n	8002d86 <_printf_common+0xae>
 8002d24:	0022      	movs	r2, r4
 8002d26:	9901      	ldr	r1, [sp, #4]
 8002d28:	9800      	ldr	r0, [sp, #0]
 8002d2a:	9e08      	ldr	r6, [sp, #32]
 8002d2c:	3243      	adds	r2, #67	; 0x43
 8002d2e:	47b0      	blx	r6
 8002d30:	1c43      	adds	r3, r0, #1
 8002d32:	d025      	beq.n	8002d80 <_printf_common+0xa8>
 8002d34:	2306      	movs	r3, #6
 8002d36:	6820      	ldr	r0, [r4, #0]
 8002d38:	682a      	ldr	r2, [r5, #0]
 8002d3a:	68e1      	ldr	r1, [r4, #12]
 8002d3c:	2500      	movs	r5, #0
 8002d3e:	4003      	ands	r3, r0
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d103      	bne.n	8002d4c <_printf_common+0x74>
 8002d44:	1a8d      	subs	r5, r1, r2
 8002d46:	43eb      	mvns	r3, r5
 8002d48:	17db      	asrs	r3, r3, #31
 8002d4a:	401d      	ands	r5, r3
 8002d4c:	68a3      	ldr	r3, [r4, #8]
 8002d4e:	6922      	ldr	r2, [r4, #16]
 8002d50:	4293      	cmp	r3, r2
 8002d52:	dd01      	ble.n	8002d58 <_printf_common+0x80>
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	18ed      	adds	r5, r5, r3
 8002d58:	2700      	movs	r7, #0
 8002d5a:	42bd      	cmp	r5, r7
 8002d5c:	d120      	bne.n	8002da0 <_printf_common+0xc8>
 8002d5e:	2000      	movs	r0, #0
 8002d60:	e010      	b.n	8002d84 <_printf_common+0xac>
 8002d62:	3701      	adds	r7, #1
 8002d64:	68e3      	ldr	r3, [r4, #12]
 8002d66:	682a      	ldr	r2, [r5, #0]
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	42bb      	cmp	r3, r7
 8002d6c:	ddd2      	ble.n	8002d14 <_printf_common+0x3c>
 8002d6e:	0022      	movs	r2, r4
 8002d70:	2301      	movs	r3, #1
 8002d72:	9901      	ldr	r1, [sp, #4]
 8002d74:	9800      	ldr	r0, [sp, #0]
 8002d76:	9e08      	ldr	r6, [sp, #32]
 8002d78:	3219      	adds	r2, #25
 8002d7a:	47b0      	blx	r6
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	d1f0      	bne.n	8002d62 <_printf_common+0x8a>
 8002d80:	2001      	movs	r0, #1
 8002d82:	4240      	negs	r0, r0
 8002d84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d86:	2030      	movs	r0, #48	; 0x30
 8002d88:	18e1      	adds	r1, r4, r3
 8002d8a:	3143      	adds	r1, #67	; 0x43
 8002d8c:	7008      	strb	r0, [r1, #0]
 8002d8e:	0021      	movs	r1, r4
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	3145      	adds	r1, #69	; 0x45
 8002d94:	7809      	ldrb	r1, [r1, #0]
 8002d96:	18a2      	adds	r2, r4, r2
 8002d98:	3243      	adds	r2, #67	; 0x43
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	7011      	strb	r1, [r2, #0]
 8002d9e:	e7c1      	b.n	8002d24 <_printf_common+0x4c>
 8002da0:	0022      	movs	r2, r4
 8002da2:	2301      	movs	r3, #1
 8002da4:	9901      	ldr	r1, [sp, #4]
 8002da6:	9800      	ldr	r0, [sp, #0]
 8002da8:	9e08      	ldr	r6, [sp, #32]
 8002daa:	321a      	adds	r2, #26
 8002dac:	47b0      	blx	r6
 8002dae:	1c43      	adds	r3, r0, #1
 8002db0:	d0e6      	beq.n	8002d80 <_printf_common+0xa8>
 8002db2:	3701      	adds	r7, #1
 8002db4:	e7d1      	b.n	8002d5a <_printf_common+0x82>
	...

08002db8 <_printf_i>:
 8002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dba:	b08b      	sub	sp, #44	; 0x2c
 8002dbc:	9206      	str	r2, [sp, #24]
 8002dbe:	000a      	movs	r2, r1
 8002dc0:	3243      	adds	r2, #67	; 0x43
 8002dc2:	9307      	str	r3, [sp, #28]
 8002dc4:	9005      	str	r0, [sp, #20]
 8002dc6:	9204      	str	r2, [sp, #16]
 8002dc8:	7e0a      	ldrb	r2, [r1, #24]
 8002dca:	000c      	movs	r4, r1
 8002dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002dce:	2a78      	cmp	r2, #120	; 0x78
 8002dd0:	d806      	bhi.n	8002de0 <_printf_i+0x28>
 8002dd2:	2a62      	cmp	r2, #98	; 0x62
 8002dd4:	d808      	bhi.n	8002de8 <_printf_i+0x30>
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d100      	bne.n	8002ddc <_printf_i+0x24>
 8002dda:	e0c0      	b.n	8002f5e <_printf_i+0x1a6>
 8002ddc:	2a58      	cmp	r2, #88	; 0x58
 8002dde:	d052      	beq.n	8002e86 <_printf_i+0xce>
 8002de0:	0026      	movs	r6, r4
 8002de2:	3642      	adds	r6, #66	; 0x42
 8002de4:	7032      	strb	r2, [r6, #0]
 8002de6:	e022      	b.n	8002e2e <_printf_i+0x76>
 8002de8:	0010      	movs	r0, r2
 8002dea:	3863      	subs	r0, #99	; 0x63
 8002dec:	2815      	cmp	r0, #21
 8002dee:	d8f7      	bhi.n	8002de0 <_printf_i+0x28>
 8002df0:	f7fd f98e 	bl	8000110 <__gnu_thumb1_case_shi>
 8002df4:	001f0016 	.word	0x001f0016
 8002df8:	fff6fff6 	.word	0xfff6fff6
 8002dfc:	fff6fff6 	.word	0xfff6fff6
 8002e00:	fff6001f 	.word	0xfff6001f
 8002e04:	fff6fff6 	.word	0xfff6fff6
 8002e08:	00a8fff6 	.word	0x00a8fff6
 8002e0c:	009a0036 	.word	0x009a0036
 8002e10:	fff6fff6 	.word	0xfff6fff6
 8002e14:	fff600b9 	.word	0xfff600b9
 8002e18:	fff60036 	.word	0xfff60036
 8002e1c:	009efff6 	.word	0x009efff6
 8002e20:	0026      	movs	r6, r4
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	3642      	adds	r6, #66	; 0x42
 8002e26:	1d11      	adds	r1, r2, #4
 8002e28:	6019      	str	r1, [r3, #0]
 8002e2a:	6813      	ldr	r3, [r2, #0]
 8002e2c:	7033      	strb	r3, [r6, #0]
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e0a7      	b.n	8002f82 <_printf_i+0x1ca>
 8002e32:	6808      	ldr	r0, [r1, #0]
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	1d0a      	adds	r2, r1, #4
 8002e38:	0605      	lsls	r5, r0, #24
 8002e3a:	d50b      	bpl.n	8002e54 <_printf_i+0x9c>
 8002e3c:	680d      	ldr	r5, [r1, #0]
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	2d00      	cmp	r5, #0
 8002e42:	da03      	bge.n	8002e4c <_printf_i+0x94>
 8002e44:	232d      	movs	r3, #45	; 0x2d
 8002e46:	9a04      	ldr	r2, [sp, #16]
 8002e48:	426d      	negs	r5, r5
 8002e4a:	7013      	strb	r3, [r2, #0]
 8002e4c:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <_printf_i+0x21c>)
 8002e4e:	270a      	movs	r7, #10
 8002e50:	9303      	str	r3, [sp, #12]
 8002e52:	e032      	b.n	8002eba <_printf_i+0x102>
 8002e54:	680d      	ldr	r5, [r1, #0]
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	0641      	lsls	r1, r0, #25
 8002e5a:	d5f1      	bpl.n	8002e40 <_printf_i+0x88>
 8002e5c:	b22d      	sxth	r5, r5
 8002e5e:	e7ef      	b.n	8002e40 <_printf_i+0x88>
 8002e60:	680d      	ldr	r5, [r1, #0]
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	1d08      	adds	r0, r1, #4
 8002e66:	6018      	str	r0, [r3, #0]
 8002e68:	062e      	lsls	r6, r5, #24
 8002e6a:	d501      	bpl.n	8002e70 <_printf_i+0xb8>
 8002e6c:	680d      	ldr	r5, [r1, #0]
 8002e6e:	e003      	b.n	8002e78 <_printf_i+0xc0>
 8002e70:	066d      	lsls	r5, r5, #25
 8002e72:	d5fb      	bpl.n	8002e6c <_printf_i+0xb4>
 8002e74:	680d      	ldr	r5, [r1, #0]
 8002e76:	b2ad      	uxth	r5, r5
 8002e78:	4b56      	ldr	r3, [pc, #344]	; (8002fd4 <_printf_i+0x21c>)
 8002e7a:	270a      	movs	r7, #10
 8002e7c:	9303      	str	r3, [sp, #12]
 8002e7e:	2a6f      	cmp	r2, #111	; 0x6f
 8002e80:	d117      	bne.n	8002eb2 <_printf_i+0xfa>
 8002e82:	2708      	movs	r7, #8
 8002e84:	e015      	b.n	8002eb2 <_printf_i+0xfa>
 8002e86:	3145      	adds	r1, #69	; 0x45
 8002e88:	700a      	strb	r2, [r1, #0]
 8002e8a:	4a52      	ldr	r2, [pc, #328]	; (8002fd4 <_printf_i+0x21c>)
 8002e8c:	9203      	str	r2, [sp, #12]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	6821      	ldr	r1, [r4, #0]
 8002e92:	ca20      	ldmia	r2!, {r5}
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	0608      	lsls	r0, r1, #24
 8002e98:	d550      	bpl.n	8002f3c <_printf_i+0x184>
 8002e9a:	07cb      	lsls	r3, r1, #31
 8002e9c:	d502      	bpl.n	8002ea4 <_printf_i+0xec>
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	4319      	orrs	r1, r3
 8002ea2:	6021      	str	r1, [r4, #0]
 8002ea4:	2710      	movs	r7, #16
 8002ea6:	2d00      	cmp	r5, #0
 8002ea8:	d103      	bne.n	8002eb2 <_printf_i+0xfa>
 8002eaa:	2320      	movs	r3, #32
 8002eac:	6822      	ldr	r2, [r4, #0]
 8002eae:	439a      	bics	r2, r3
 8002eb0:	6022      	str	r2, [r4, #0]
 8002eb2:	0023      	movs	r3, r4
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	3343      	adds	r3, #67	; 0x43
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	6863      	ldr	r3, [r4, #4]
 8002ebc:	60a3      	str	r3, [r4, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	db03      	blt.n	8002eca <_printf_i+0x112>
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	6821      	ldr	r1, [r4, #0]
 8002ec6:	4391      	bics	r1, r2
 8002ec8:	6021      	str	r1, [r4, #0]
 8002eca:	2d00      	cmp	r5, #0
 8002ecc:	d102      	bne.n	8002ed4 <_printf_i+0x11c>
 8002ece:	9e04      	ldr	r6, [sp, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00c      	beq.n	8002eee <_printf_i+0x136>
 8002ed4:	9e04      	ldr	r6, [sp, #16]
 8002ed6:	0028      	movs	r0, r5
 8002ed8:	0039      	movs	r1, r7
 8002eda:	f7fd f9a9 	bl	8000230 <__aeabi_uidivmod>
 8002ede:	9b03      	ldr	r3, [sp, #12]
 8002ee0:	3e01      	subs	r6, #1
 8002ee2:	5c5b      	ldrb	r3, [r3, r1]
 8002ee4:	7033      	strb	r3, [r6, #0]
 8002ee6:	002b      	movs	r3, r5
 8002ee8:	0005      	movs	r5, r0
 8002eea:	429f      	cmp	r7, r3
 8002eec:	d9f3      	bls.n	8002ed6 <_printf_i+0x11e>
 8002eee:	2f08      	cmp	r7, #8
 8002ef0:	d109      	bne.n	8002f06 <_printf_i+0x14e>
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	07db      	lsls	r3, r3, #31
 8002ef6:	d506      	bpl.n	8002f06 <_printf_i+0x14e>
 8002ef8:	6863      	ldr	r3, [r4, #4]
 8002efa:	6922      	ldr	r2, [r4, #16]
 8002efc:	4293      	cmp	r3, r2
 8002efe:	dc02      	bgt.n	8002f06 <_printf_i+0x14e>
 8002f00:	2330      	movs	r3, #48	; 0x30
 8002f02:	3e01      	subs	r6, #1
 8002f04:	7033      	strb	r3, [r6, #0]
 8002f06:	9b04      	ldr	r3, [sp, #16]
 8002f08:	1b9b      	subs	r3, r3, r6
 8002f0a:	6123      	str	r3, [r4, #16]
 8002f0c:	9b07      	ldr	r3, [sp, #28]
 8002f0e:	0021      	movs	r1, r4
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	9805      	ldr	r0, [sp, #20]
 8002f14:	9b06      	ldr	r3, [sp, #24]
 8002f16:	aa09      	add	r2, sp, #36	; 0x24
 8002f18:	f7ff fede 	bl	8002cd8 <_printf_common>
 8002f1c:	1c43      	adds	r3, r0, #1
 8002f1e:	d135      	bne.n	8002f8c <_printf_i+0x1d4>
 8002f20:	2001      	movs	r0, #1
 8002f22:	4240      	negs	r0, r0
 8002f24:	b00b      	add	sp, #44	; 0x2c
 8002f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f28:	2220      	movs	r2, #32
 8002f2a:	6809      	ldr	r1, [r1, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	6022      	str	r2, [r4, #0]
 8002f30:	0022      	movs	r2, r4
 8002f32:	2178      	movs	r1, #120	; 0x78
 8002f34:	3245      	adds	r2, #69	; 0x45
 8002f36:	7011      	strb	r1, [r2, #0]
 8002f38:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <_printf_i+0x220>)
 8002f3a:	e7a7      	b.n	8002e8c <_printf_i+0xd4>
 8002f3c:	0648      	lsls	r0, r1, #25
 8002f3e:	d5ac      	bpl.n	8002e9a <_printf_i+0xe2>
 8002f40:	b2ad      	uxth	r5, r5
 8002f42:	e7aa      	b.n	8002e9a <_printf_i+0xe2>
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	680d      	ldr	r5, [r1, #0]
 8002f48:	1d10      	adds	r0, r2, #4
 8002f4a:	6949      	ldr	r1, [r1, #20]
 8002f4c:	6018      	str	r0, [r3, #0]
 8002f4e:	6813      	ldr	r3, [r2, #0]
 8002f50:	062e      	lsls	r6, r5, #24
 8002f52:	d501      	bpl.n	8002f58 <_printf_i+0x1a0>
 8002f54:	6019      	str	r1, [r3, #0]
 8002f56:	e002      	b.n	8002f5e <_printf_i+0x1a6>
 8002f58:	066d      	lsls	r5, r5, #25
 8002f5a:	d5fb      	bpl.n	8002f54 <_printf_i+0x19c>
 8002f5c:	8019      	strh	r1, [r3, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9e04      	ldr	r6, [sp, #16]
 8002f62:	6123      	str	r3, [r4, #16]
 8002f64:	e7d2      	b.n	8002f0c <_printf_i+0x154>
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	1d11      	adds	r1, r2, #4
 8002f6a:	6019      	str	r1, [r3, #0]
 8002f6c:	6816      	ldr	r6, [r2, #0]
 8002f6e:	2100      	movs	r1, #0
 8002f70:	0030      	movs	r0, r6
 8002f72:	6862      	ldr	r2, [r4, #4]
 8002f74:	f000 f832 	bl	8002fdc <memchr>
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	d001      	beq.n	8002f80 <_printf_i+0x1c8>
 8002f7c:	1b80      	subs	r0, r0, r6
 8002f7e:	6060      	str	r0, [r4, #4]
 8002f80:	6863      	ldr	r3, [r4, #4]
 8002f82:	6123      	str	r3, [r4, #16]
 8002f84:	2300      	movs	r3, #0
 8002f86:	9a04      	ldr	r2, [sp, #16]
 8002f88:	7013      	strb	r3, [r2, #0]
 8002f8a:	e7bf      	b.n	8002f0c <_printf_i+0x154>
 8002f8c:	6923      	ldr	r3, [r4, #16]
 8002f8e:	0032      	movs	r2, r6
 8002f90:	9906      	ldr	r1, [sp, #24]
 8002f92:	9805      	ldr	r0, [sp, #20]
 8002f94:	9d07      	ldr	r5, [sp, #28]
 8002f96:	47a8      	blx	r5
 8002f98:	1c43      	adds	r3, r0, #1
 8002f9a:	d0c1      	beq.n	8002f20 <_printf_i+0x168>
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	079b      	lsls	r3, r3, #30
 8002fa0:	d415      	bmi.n	8002fce <_printf_i+0x216>
 8002fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fa4:	68e0      	ldr	r0, [r4, #12]
 8002fa6:	4298      	cmp	r0, r3
 8002fa8:	dabc      	bge.n	8002f24 <_printf_i+0x16c>
 8002faa:	0018      	movs	r0, r3
 8002fac:	e7ba      	b.n	8002f24 <_printf_i+0x16c>
 8002fae:	0022      	movs	r2, r4
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	9906      	ldr	r1, [sp, #24]
 8002fb4:	9805      	ldr	r0, [sp, #20]
 8002fb6:	9e07      	ldr	r6, [sp, #28]
 8002fb8:	3219      	adds	r2, #25
 8002fba:	47b0      	blx	r6
 8002fbc:	1c43      	adds	r3, r0, #1
 8002fbe:	d0af      	beq.n	8002f20 <_printf_i+0x168>
 8002fc0:	3501      	adds	r5, #1
 8002fc2:	68e3      	ldr	r3, [r4, #12]
 8002fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	42ab      	cmp	r3, r5
 8002fca:	dcf0      	bgt.n	8002fae <_printf_i+0x1f6>
 8002fcc:	e7e9      	b.n	8002fa2 <_printf_i+0x1ea>
 8002fce:	2500      	movs	r5, #0
 8002fd0:	e7f7      	b.n	8002fc2 <_printf_i+0x20a>
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	08003349 	.word	0x08003349
 8002fd8:	0800335a 	.word	0x0800335a

08002fdc <memchr>:
 8002fdc:	b2c9      	uxtb	r1, r1
 8002fde:	1882      	adds	r2, r0, r2
 8002fe0:	4290      	cmp	r0, r2
 8002fe2:	d101      	bne.n	8002fe8 <memchr+0xc>
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	4770      	bx	lr
 8002fe8:	7803      	ldrb	r3, [r0, #0]
 8002fea:	428b      	cmp	r3, r1
 8002fec:	d0fb      	beq.n	8002fe6 <memchr+0xa>
 8002fee:	3001      	adds	r0, #1
 8002ff0:	e7f6      	b.n	8002fe0 <memchr+0x4>

08002ff2 <memcpy>:
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d100      	bne.n	8002ffc <memcpy+0xa>
 8002ffa:	bd10      	pop	{r4, pc}
 8002ffc:	5ccc      	ldrb	r4, [r1, r3]
 8002ffe:	54c4      	strb	r4, [r0, r3]
 8003000:	3301      	adds	r3, #1
 8003002:	e7f8      	b.n	8002ff6 <memcpy+0x4>

08003004 <memmove>:
 8003004:	b510      	push	{r4, lr}
 8003006:	4288      	cmp	r0, r1
 8003008:	d902      	bls.n	8003010 <memmove+0xc>
 800300a:	188b      	adds	r3, r1, r2
 800300c:	4298      	cmp	r0, r3
 800300e:	d303      	bcc.n	8003018 <memmove+0x14>
 8003010:	2300      	movs	r3, #0
 8003012:	e007      	b.n	8003024 <memmove+0x20>
 8003014:	5c8b      	ldrb	r3, [r1, r2]
 8003016:	5483      	strb	r3, [r0, r2]
 8003018:	3a01      	subs	r2, #1
 800301a:	d2fb      	bcs.n	8003014 <memmove+0x10>
 800301c:	bd10      	pop	{r4, pc}
 800301e:	5ccc      	ldrb	r4, [r1, r3]
 8003020:	54c4      	strb	r4, [r0, r3]
 8003022:	3301      	adds	r3, #1
 8003024:	429a      	cmp	r2, r3
 8003026:	d1fa      	bne.n	800301e <memmove+0x1a>
 8003028:	e7f8      	b.n	800301c <memmove+0x18>
	...

0800302c <_free_r>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	0005      	movs	r5, r0
 8003030:	2900      	cmp	r1, #0
 8003032:	d010      	beq.n	8003056 <_free_r+0x2a>
 8003034:	1f0c      	subs	r4, r1, #4
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	da00      	bge.n	800303e <_free_r+0x12>
 800303c:	18e4      	adds	r4, r4, r3
 800303e:	0028      	movs	r0, r5
 8003040:	f000 f8d4 	bl	80031ec <__malloc_lock>
 8003044:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <_free_r+0x90>)
 8003046:	6813      	ldr	r3, [r2, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <_free_r+0x2c>
 800304c:	6063      	str	r3, [r4, #4]
 800304e:	6014      	str	r4, [r2, #0]
 8003050:	0028      	movs	r0, r5
 8003052:	f000 f8d3 	bl	80031fc <__malloc_unlock>
 8003056:	bd70      	pop	{r4, r5, r6, pc}
 8003058:	42a3      	cmp	r3, r4
 800305a:	d908      	bls.n	800306e <_free_r+0x42>
 800305c:	6821      	ldr	r1, [r4, #0]
 800305e:	1860      	adds	r0, r4, r1
 8003060:	4283      	cmp	r3, r0
 8003062:	d1f3      	bne.n	800304c <_free_r+0x20>
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	1841      	adds	r1, r0, r1
 800306a:	6021      	str	r1, [r4, #0]
 800306c:	e7ee      	b.n	800304c <_free_r+0x20>
 800306e:	001a      	movs	r2, r3
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <_free_r+0x4e>
 8003076:	42a3      	cmp	r3, r4
 8003078:	d9f9      	bls.n	800306e <_free_r+0x42>
 800307a:	6811      	ldr	r1, [r2, #0]
 800307c:	1850      	adds	r0, r2, r1
 800307e:	42a0      	cmp	r0, r4
 8003080:	d10b      	bne.n	800309a <_free_r+0x6e>
 8003082:	6820      	ldr	r0, [r4, #0]
 8003084:	1809      	adds	r1, r1, r0
 8003086:	1850      	adds	r0, r2, r1
 8003088:	6011      	str	r1, [r2, #0]
 800308a:	4283      	cmp	r3, r0
 800308c:	d1e0      	bne.n	8003050 <_free_r+0x24>
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	1841      	adds	r1, r0, r1
 8003094:	6011      	str	r1, [r2, #0]
 8003096:	6053      	str	r3, [r2, #4]
 8003098:	e7da      	b.n	8003050 <_free_r+0x24>
 800309a:	42a0      	cmp	r0, r4
 800309c:	d902      	bls.n	80030a4 <_free_r+0x78>
 800309e:	230c      	movs	r3, #12
 80030a0:	602b      	str	r3, [r5, #0]
 80030a2:	e7d5      	b.n	8003050 <_free_r+0x24>
 80030a4:	6821      	ldr	r1, [r4, #0]
 80030a6:	1860      	adds	r0, r4, r1
 80030a8:	4283      	cmp	r3, r0
 80030aa:	d103      	bne.n	80030b4 <_free_r+0x88>
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	1841      	adds	r1, r0, r1
 80030b2:	6021      	str	r1, [r4, #0]
 80030b4:	6063      	str	r3, [r4, #4]
 80030b6:	6054      	str	r4, [r2, #4]
 80030b8:	e7ca      	b.n	8003050 <_free_r+0x24>
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	20000094 	.word	0x20000094

080030c0 <_malloc_r>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	2303      	movs	r3, #3
 80030c4:	1ccd      	adds	r5, r1, #3
 80030c6:	439d      	bics	r5, r3
 80030c8:	3508      	adds	r5, #8
 80030ca:	0006      	movs	r6, r0
 80030cc:	2d0c      	cmp	r5, #12
 80030ce:	d21f      	bcs.n	8003110 <_malloc_r+0x50>
 80030d0:	250c      	movs	r5, #12
 80030d2:	42a9      	cmp	r1, r5
 80030d4:	d81e      	bhi.n	8003114 <_malloc_r+0x54>
 80030d6:	0030      	movs	r0, r6
 80030d8:	f000 f888 	bl	80031ec <__malloc_lock>
 80030dc:	4925      	ldr	r1, [pc, #148]	; (8003174 <_malloc_r+0xb4>)
 80030de:	680a      	ldr	r2, [r1, #0]
 80030e0:	0014      	movs	r4, r2
 80030e2:	2c00      	cmp	r4, #0
 80030e4:	d11a      	bne.n	800311c <_malloc_r+0x5c>
 80030e6:	4f24      	ldr	r7, [pc, #144]	; (8003178 <_malloc_r+0xb8>)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d104      	bne.n	80030f8 <_malloc_r+0x38>
 80030ee:	0021      	movs	r1, r4
 80030f0:	0030      	movs	r0, r6
 80030f2:	f000 f869 	bl	80031c8 <_sbrk_r>
 80030f6:	6038      	str	r0, [r7, #0]
 80030f8:	0029      	movs	r1, r5
 80030fa:	0030      	movs	r0, r6
 80030fc:	f000 f864 	bl	80031c8 <_sbrk_r>
 8003100:	1c43      	adds	r3, r0, #1
 8003102:	d12b      	bne.n	800315c <_malloc_r+0x9c>
 8003104:	230c      	movs	r3, #12
 8003106:	0030      	movs	r0, r6
 8003108:	6033      	str	r3, [r6, #0]
 800310a:	f000 f877 	bl	80031fc <__malloc_unlock>
 800310e:	e003      	b.n	8003118 <_malloc_r+0x58>
 8003110:	2d00      	cmp	r5, #0
 8003112:	dade      	bge.n	80030d2 <_malloc_r+0x12>
 8003114:	230c      	movs	r3, #12
 8003116:	6033      	str	r3, [r6, #0]
 8003118:	2000      	movs	r0, #0
 800311a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	1b5b      	subs	r3, r3, r5
 8003120:	d419      	bmi.n	8003156 <_malloc_r+0x96>
 8003122:	2b0b      	cmp	r3, #11
 8003124:	d903      	bls.n	800312e <_malloc_r+0x6e>
 8003126:	6023      	str	r3, [r4, #0]
 8003128:	18e4      	adds	r4, r4, r3
 800312a:	6025      	str	r5, [r4, #0]
 800312c:	e003      	b.n	8003136 <_malloc_r+0x76>
 800312e:	6863      	ldr	r3, [r4, #4]
 8003130:	42a2      	cmp	r2, r4
 8003132:	d10e      	bne.n	8003152 <_malloc_r+0x92>
 8003134:	600b      	str	r3, [r1, #0]
 8003136:	0030      	movs	r0, r6
 8003138:	f000 f860 	bl	80031fc <__malloc_unlock>
 800313c:	0020      	movs	r0, r4
 800313e:	2207      	movs	r2, #7
 8003140:	300b      	adds	r0, #11
 8003142:	1d23      	adds	r3, r4, #4
 8003144:	4390      	bics	r0, r2
 8003146:	1ac2      	subs	r2, r0, r3
 8003148:	4298      	cmp	r0, r3
 800314a:	d0e6      	beq.n	800311a <_malloc_r+0x5a>
 800314c:	1a1b      	subs	r3, r3, r0
 800314e:	50a3      	str	r3, [r4, r2]
 8003150:	e7e3      	b.n	800311a <_malloc_r+0x5a>
 8003152:	6053      	str	r3, [r2, #4]
 8003154:	e7ef      	b.n	8003136 <_malloc_r+0x76>
 8003156:	0022      	movs	r2, r4
 8003158:	6864      	ldr	r4, [r4, #4]
 800315a:	e7c2      	b.n	80030e2 <_malloc_r+0x22>
 800315c:	2303      	movs	r3, #3
 800315e:	1cc4      	adds	r4, r0, #3
 8003160:	439c      	bics	r4, r3
 8003162:	42a0      	cmp	r0, r4
 8003164:	d0e1      	beq.n	800312a <_malloc_r+0x6a>
 8003166:	1a21      	subs	r1, r4, r0
 8003168:	0030      	movs	r0, r6
 800316a:	f000 f82d 	bl	80031c8 <_sbrk_r>
 800316e:	1c43      	adds	r3, r0, #1
 8003170:	d1db      	bne.n	800312a <_malloc_r+0x6a>
 8003172:	e7c7      	b.n	8003104 <_malloc_r+0x44>
 8003174:	20000094 	.word	0x20000094
 8003178:	20000098 	.word	0x20000098

0800317c <_realloc_r>:
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317e:	0007      	movs	r7, r0
 8003180:	000d      	movs	r5, r1
 8003182:	0016      	movs	r6, r2
 8003184:	2900      	cmp	r1, #0
 8003186:	d105      	bne.n	8003194 <_realloc_r+0x18>
 8003188:	0011      	movs	r1, r2
 800318a:	f7ff ff99 	bl	80030c0 <_malloc_r>
 800318e:	0004      	movs	r4, r0
 8003190:	0020      	movs	r0, r4
 8003192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003194:	2a00      	cmp	r2, #0
 8003196:	d103      	bne.n	80031a0 <_realloc_r+0x24>
 8003198:	f7ff ff48 	bl	800302c <_free_r>
 800319c:	0034      	movs	r4, r6
 800319e:	e7f7      	b.n	8003190 <_realloc_r+0x14>
 80031a0:	f000 f834 	bl	800320c <_malloc_usable_size_r>
 80031a4:	002c      	movs	r4, r5
 80031a6:	42b0      	cmp	r0, r6
 80031a8:	d2f2      	bcs.n	8003190 <_realloc_r+0x14>
 80031aa:	0031      	movs	r1, r6
 80031ac:	0038      	movs	r0, r7
 80031ae:	f7ff ff87 	bl	80030c0 <_malloc_r>
 80031b2:	1e04      	subs	r4, r0, #0
 80031b4:	d0ec      	beq.n	8003190 <_realloc_r+0x14>
 80031b6:	0029      	movs	r1, r5
 80031b8:	0032      	movs	r2, r6
 80031ba:	f7ff ff1a 	bl	8002ff2 <memcpy>
 80031be:	0029      	movs	r1, r5
 80031c0:	0038      	movs	r0, r7
 80031c2:	f7ff ff33 	bl	800302c <_free_r>
 80031c6:	e7e3      	b.n	8003190 <_realloc_r+0x14>

080031c8 <_sbrk_r>:
 80031c8:	2300      	movs	r3, #0
 80031ca:	b570      	push	{r4, r5, r6, lr}
 80031cc:	4d06      	ldr	r5, [pc, #24]	; (80031e8 <_sbrk_r+0x20>)
 80031ce:	0004      	movs	r4, r0
 80031d0:	0008      	movs	r0, r1
 80031d2:	602b      	str	r3, [r5, #0]
 80031d4:	f7fd fb78 	bl	80008c8 <_sbrk>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d103      	bne.n	80031e4 <_sbrk_r+0x1c>
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d000      	beq.n	80031e4 <_sbrk_r+0x1c>
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	bd70      	pop	{r4, r5, r6, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	20000158 	.word	0x20000158

080031ec <__malloc_lock>:
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4802      	ldr	r0, [pc, #8]	; (80031f8 <__malloc_lock+0xc>)
 80031f0:	f000 f814 	bl	800321c <__retarget_lock_acquire_recursive>
 80031f4:	bd10      	pop	{r4, pc}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	20000160 	.word	0x20000160

080031fc <__malloc_unlock>:
 80031fc:	b510      	push	{r4, lr}
 80031fe:	4802      	ldr	r0, [pc, #8]	; (8003208 <__malloc_unlock+0xc>)
 8003200:	f000 f80d 	bl	800321e <__retarget_lock_release_recursive>
 8003204:	bd10      	pop	{r4, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	20000160 	.word	0x20000160

0800320c <_malloc_usable_size_r>:
 800320c:	1f0b      	subs	r3, r1, #4
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	1f18      	subs	r0, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	da01      	bge.n	800321a <_malloc_usable_size_r+0xe>
 8003216:	580b      	ldr	r3, [r1, r0]
 8003218:	18c0      	adds	r0, r0, r3
 800321a:	4770      	bx	lr

0800321c <__retarget_lock_acquire_recursive>:
 800321c:	4770      	bx	lr

0800321e <__retarget_lock_release_recursive>:
 800321e:	4770      	bx	lr

08003220 <_init>:
 8003220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003226:	bc08      	pop	{r3}
 8003228:	469e      	mov	lr, r3
 800322a:	4770      	bx	lr

0800322c <_fini>:
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003232:	bc08      	pop	{r3}
 8003234:	469e      	mov	lr, r3
 8003236:	4770      	bx	lr
